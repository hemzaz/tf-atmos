# Template: CI/CD Atmos Workflow
# This template is designed for integration with CI/CD pipelines
# Replace placeholder values and comments with your actual implementation

# Workflow configuration
name: cicd-workflow-name  # Replace with your workflow name
description: "CI/CD pipeline integration workflow"  # Replace with your workflow description

# Required command line arguments
args:
  - name: tenant
    description: "Tenant name (e.g., mycompany)"
    required: true
  - name: account
    description: "Account name (e.g., dev, staging, prod)"
    required: true
  - name: environment
    description: "Environment name (e.g., ue1, uw2)"
    required: true
  - name: components
    description: "Comma-separated list of components to deploy (or 'all' for all components)"
    required: false
    default: "all"

# Workflow steps
steps:
  # Initialize step
  - name: initialize
    description: "Initialize CI/CD workflow"
    command: echo
    args:
      - "Starting CI/CD workflow for {tenant}-{account}-{environment}"

  # Lint step
  - name: lint
    description: "Run linting on Terraform code"
    command: atmos
    args:
      - workflow
      - lint

  # Validation step
  - name: validate
    description: "Validate Terraform configurations"
    command: atmos
    args:
      - workflow
      - validate

  # Plan step
  - name: plan
    description: "Generate and save Terraform plans"
    command: bash
    args:
      - -c
      - |
        if [ "{components}" == "all" ]; then
          atmos workflow plan-environment tenant={tenant} account={account} environment={environment} --tf-plan-file=plan.tfplan
        else
          IFS=',' read -ra COMPONENTS <<< "{components}"
          for component in "${COMPONENTS[@]}"; do
            atmos terraform plan "$component" -s {tenant}-{account}-{environment} --tf-plan-file=${component}.tfplan
          done
        fi

  # Apply step (for CI/CD, typically uses saved plan files)
  - name: apply
    description: "Apply Terraform changes using saved plan files"
    command: bash
    args:
      - -c
      - |
        if [ "{components}" == "all" ]; then
          # In CI/CD, you might instead apply individual components with their plan files
          atmos workflow apply-environment tenant={tenant} account={account} environment={environment} --auto-approve
        else
          IFS=',' read -ra COMPONENTS <<< "{components}"
          for component in "${COMPONENTS[@]}"; do
            atmos terraform apply "$component" -s {tenant}-{account}-{environment} --tf-plan-file=${component}.tfplan --auto-approve
          done
        fi

  # Test step
  - name: test
    description: "Run tests on deployed infrastructure"
    command: bash
    args:
      - -c
      - |
        echo "Running tests on deployed infrastructure..."
        # Add your testing commands here
        # Examples:
        # - API endpoint tests
        # - Infrastructure validation tests
        # - Connectivity tests
        echo "Tests completed successfully"

  # Notification step
  - name: notify
    description: "Send deployment notification"
    command: bash
    args:
      - -c
      - |
        echo "Deployment to {tenant}-{account}-{environment} completed successfully"
        # Add notification commands here (e.g., webhook calls, email, Slack notifications)
        # Examples:
        # - curl -X POST -H "Content-Type: application/json" -d '{"text":"Deployment succeeded"}' $WEBHOOK_URL
        # - aws sns publish --topic-arn $SNS_TOPIC --message "Deployment succeeded"