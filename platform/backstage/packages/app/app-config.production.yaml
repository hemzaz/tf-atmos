---
app:
  title: Platform Developer Portal
  baseUrl: ${BACKSTAGE_BASE_URL}
  support:
    url: https://github.com/your-org/platform-support/issues
    items:
      - title: Issues
        icon: github
        links:
          - url: https://github.com/your-org/platform-support/issues
            title: GitHub Issues
      - title: Discord
        icon: chat
        links:
          - url: https://discord.gg/platform-support
            title: '#platform-support'
      - title: Documentation
        icon: docs
        links:
          - url: https://docs.platform.company.com
            title: Platform Docs

organization:
  name: Platform Engineering

backend:
  auth:
    keys:
      - secret: ${BACKEND_SECRET}
  baseUrl: ${BACKSTAGE_BACKEND_URL}
  listen:
    port: 7007
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: ["'self'", 'data:', 'https:']
    script-src: ["'self'", "'unsafe-eval'", "'unsafe-inline'"]
    upgrade-insecure-requests: false
  cors:
    origin: ${BACKSTAGE_BASE_URL}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DB}
      ssl:
        require: true
        rejectUnauthorized: false
  cache:
    store: redis
    connection:
      host: ${REDIS_HOST:-localhost}
      port: ${REDIS_PORT:-6379}
      password: ${REDIS_PASSWORD}

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

auth:
  environment: production
  providers:
    github:
      production:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityAnnotation
            - resolver: emailLocalPartMatchingUserEntityName

scaffolder:
  github:
    token: ${GITHUB_TOKEN}
    visibility: internal

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template, Domain, Group, User]
  locations:
    # Platform catalog discovery
    - type: file
      target: ../../catalog/all.yaml
      rules:
        - allow: [Component, System, API, Resource, Location, Template, Domain, Group, User]

    # Platform software templates
    - type: file
      target: ../../catalog/templates/terraform-component/template.yaml
      rules:
        - allow: [Template]

    - type: file
      target: ../../catalog/templates/environment-onboarding/template.yaml
      rules:
        - allow: [Template]

    # Infrastructure components auto-discovery
    - type: file
      target: ../../../components/terraform/*/catalog-info.yaml
      rules:
        - allow: [Component, API]

    # GitHub organization discovery (production)
    - type: github-discovery
      target: https://github.com/your-org/infrastructure/blob/main/catalog-info.yaml
    - type: github-discovery
      target: https://github.com/your-org/platform/blob/main/catalog-info.yaml

techdocs:
  builder: 'external'
  generator:
    runIn: 'docker'
  publisher:
    type: 'awsS3'
    awsS3:
      bucketName: ${TECHDOCS_S3_BUCKET_NAME}
      region: ${AWS_DEFAULT_REGION}
      accountId: ${AWS_ACCOUNT_ID}

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: ${EKS_CLUSTER_URL}
          name: production-cluster
          authProvider: 'aws'
          serviceAccountToken: ${KUBERNETES_SERVICE_ACCOUNT_TOKEN}
        - url: ${EKS_STAGING_CLUSTER_URL}
          name: staging-cluster
          authProvider: 'aws'
          serviceAccountToken: ${KUBERNETES_STAGING_SERVICE_ACCOUNT_TOKEN}

permission:
  enabled: true

# Platform-specific configuration
platform:
  # Atmos integration
  atmos:
    baseUrl: ${BACKSTAGE_BACKEND_URL}/api/platform/atmos
    defaultTimeout: 300000

  # Cost tracking integration
  cost:
    baseUrl: ${BACKSTAGE_BACKEND_URL}/api/platform/cost
    refreshInterval: 300000

  # Compliance integration
  compliance:
    baseUrl: ${BACKSTAGE_BACKEND_URL}/api/platform/compliance
    refreshInterval: 600000

# Proxy configuration for platform APIs
proxy:
  endpoints:
    # AWS Cost Explorer proxy
    '/api/aws/cost':
      target: 'https://ce.${AWS_DEFAULT_REGION}.amazonaws.com'
      changeOrigin: true
      credentials: include
      headers:
        Authorization: ${AWS_COST_EXPLORER_AUTH}

    # GitHub API proxy for enhanced integrations
    '/api/github':
      target: 'https://api.github.com'
      changeOrigin: true
      headers:
        Authorization: 'Bearer ${GITHUB_TOKEN}'

    # Grafana proxy for dashboards
    '/api/grafana':
      target: ${GRAFANA_URL}
      changeOrigin: true
      headers:
        Authorization: 'Bearer ${GRAFANA_TOKEN}'

# Monitoring and observability
monitoring:
  prometheus:
    enabled: true
    endpoint: ${PROMETHEUS_ENDPOINT}

  grafana:
    enabled: true
    baseUrl: ${GRAFANA_URL}

  sentry:
    dsn: ${SENTRY_DSN}
    environment: production

# Security configuration
security:
  csp:
    frame-ancestors: ["'self'", "${BACKSTAGE_BASE_URL}"]

  headers:
    Strict-Transport-Security: 'max-age=31536000; includeSubDomains'
    X-Frame-Options: 'SAMEORIGIN'
    X-Content-Type-Options: 'nosniff'
    Referrer-Policy: 'strict-origin-when-cross-origin'