---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: terraform-component
  title: Terraform Component
  description: Create a new Terraform component for the platform
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - terraform
    - infrastructure
    - iac
    - platform
spec:
  owner: platform-team
  type: infrastructure-component

  parameters:
    - title: Component Details
      required:
        - name
        - description
        - owner
      properties:
        name:
          title: Component Name
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          description: 'Name of the Terraform component (lowercase, hyphenated)'
          ui:autofocus: true
          ui:help: 'This will be used as the directory name and in resource naming'
        description:
          title: Description
          type: string
          description: 'Brief description of what this component does'
        owner:
          title: Owner
          type: string
          description: 'Team or individual responsible for this component'
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
              - User

    - title: Component Configuration
      properties:
        componentType:
          title: Component Type
          type: string
          description: 'Type of infrastructure component'
          default: 'service'
          enum:
            - 'service'
            - 'network'
            - 'security'
            - 'data'
            - 'monitoring'
          enumNames:
            - 'Application Service (EKS, Lambda, etc.)'
            - 'Network Infrastructure (VPC, Load Balancers)'
            - 'Security Services (IAM, KMS, etc.)'
            - 'Data Services (RDS, S3, ElastiCache)'
            - 'Monitoring & Observability'

        awsServices:
          title: AWS Services
          type: array
          description: 'Primary AWS services this component will use'
          items:
            type: string
            enum:
              - 'EC2'
              - 'EKS'
              - 'Lambda'
              - 'RDS'
              - 'S3'
              - 'VPC'
              - 'ALB'
              - 'CloudFront'
              - 'IAM'
              - 'KMS'
              - 'Secrets Manager'
              - 'CloudWatch'
              - 'ElastiCache'
          uniqueItems: true
          ui:widget: checkboxes

        includeExamples:
          title: Include Examples
          type: boolean
          default: true
          description: 'Generate example stack configurations'

        enableBackup:
          title: Enable Backup Configuration
          type: boolean
          default: false
          description: 'Include backup and recovery configuration'

        enableMonitoring:
          title: Enable Monitoring
          type: boolean
          default: true
          description: 'Include CloudWatch monitoring resources'

    - title: Security & Compliance
      properties:
        encryptionRequired:
          title: Encryption at Rest
          type: boolean
          default: true
          description: 'Enable encryption for data at rest'

        complianceFramework:
          title: Compliance Framework
          type: string
          description: 'Primary compliance framework to follow'
          default: 'SOC2'
          enum:
            - 'SOC2'
            - 'PCI-DSS'
            - 'HIPAA'
            - 'ISO27001'
            - 'CIS'
          enumNames:
            - 'SOC 2 Type II'
            - 'PCI-DSS'
            - 'HIPAA'
            - 'ISO 27001'
            - 'CIS Controls'

    - title: Repository Configuration
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              - gitlab.com

  steps:
    - id: fetch
      name: Fetch Component Template
      action: fetch:template
      input:
        url: './content'
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          componentType: ${{ parameters.componentType }}
          awsServices: ${{ parameters.awsServices }}
          includeExamples: ${{ parameters.includeExamples }}
          enableBackup: ${{ parameters.enableBackup }}
          enableMonitoring: ${{ parameters.enableMonitoring }}
          encryptionRequired: ${{ parameters.encryptionRequired }}
          complianceFramework: ${{ parameters.complianceFramework }}

    - id: validate
      name: Validate Terraform Configuration
      action: terraform:validate
      input:
        componentPath: ${{ parameters.name }}

    - id: publish
      name: Publish Component to Repository
      action: publish:github
      input:
        allowedHosts:
          - github.com
        description: 'Terraform component: ${{ parameters.description }}'
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        gitCommitMessage: 'feat: add ${{ parameters.name }} terraform component'
        gitAuthorName: 'Platform Scaffolder'
        gitAuthorEmail: 'platform@company.com'

    - id: register
      name: Register Component in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - id: create-pr
      name: Create Stack Configuration PR
      action: github:pullRequest
      input:
        repoUrl: 'github.com/your-org/infrastructure-stacks'
        title: 'feat: add ${{ parameters.name }} component to stacks'
        branchName: 'add-${{ parameters.name }}-component'
        description: |
          ## New Terraform Component: ${{ parameters.name }}

          **Description:** ${{ parameters.description }}
          **Owner:** ${{ parameters.owner }}
          **Type:** ${{ parameters.componentType }}
          **AWS Services:** ${{ parameters.awsServices | join(', ') }}

          This PR adds the new component to the appropriate stack configurations.

          ### Next Steps
          1. Review the generated component code
          2. Update stack configurations as needed
          3. Run `atmos terraform plan` to validate
          4. Merge when ready to deploy

  output:
    links:
      - title: 'Open Component Repository'
        url: ${{ steps.publish.output.remoteUrl }}
      - title: 'View Component in Catalog'
        url: 'https://platform.company.com/catalog/default/component/${{ parameters.name }}'
      - title: 'Stack Configuration PR'
        url: ${{ steps.create-pr.output.remoteUrl }}
    text:
      - title: 'Component Created Successfully!'
        content: |
          Your Terraform component **${{ parameters.name }}** has been created and registered in the platform catalog.

          **Next steps:**
          1. Review the generated code in the repository
          2. Configure the component in your stack files
          3. Run validation: `atmos terraform validate ${{ parameters.name }} -s <stack>`
          4. Deploy: `atmos terraform apply ${{ parameters.name }} -s <stack>`