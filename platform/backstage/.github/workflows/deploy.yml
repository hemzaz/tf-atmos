---
name: Deploy Platform Developer Portal

on:
  push:
    branches: [main]
    paths:
      - 'platform/backstage/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'platform/backstage/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: platform-backstage

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: platform/backstage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: platform/backstage/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint:all

      - name: Run type checking
        run: yarn tsc:full

      - name: Run tests
        run: yarn test:all
        env:
          CI: true

      - name: Build application
        run: yarn build:all

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: platform/backstage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --level moderate

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  build:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: platform/backstage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: platform/backstage
          file: platform/backstage/packages/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://platform-staging.company.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Atmos CLI
        uses: cloudposse/github-action-setup-atmos@v1
        with:
          atmos-version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_STAGING_ROLE_ARN }}
          aws-region: us-west-2
          role-session-name: GitHubActions-Staging-Deploy

      - name: Update container image in staging
        run: |
          # Update the container image tag in staging configuration
          NEW_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          # Update backstage component with new image
          atmos terraform plan backstage -s fnx-staging-us-west-2 \
            -var="container_image=${NEW_IMAGE}"

      - name: Deploy backstage to staging
        run: |
          atmos terraform apply backstage -s fnx-staging-us-west-2 \
            -var="container_image=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
            -auto-approve

      - name: Run health checks
        run: |
          # Wait for deployment and run health checks
          sleep 60

          # Check if the application is healthy
          curl -f https://platform-staging.company.com/healthcheck || exit 1

          # Run basic API tests
          curl -f https://platform-staging.company.com/api/catalog/health || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '‚úÖ Platform deployed to staging successfully'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://platform.company.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Atmos CLI
        uses: cloudposse/github-action-setup-atmos@v1
        with:
          atmos-version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE_ARN }}
          aws-region: us-west-2
          role-session-name: GitHubActions-Production-Deploy

      - name: Create production deployment
        run: |
          # Blue-green deployment strategy
          NEW_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

          echo "üöÄ Starting production deployment..."
          echo "Image: ${NEW_IMAGE}"

          # Deploy to production with zero-downtime strategy
          atmos terraform apply backstage -s fnx-prod-us-west-2 \
            -var="container_image=${NEW_IMAGE}" \
            -var="deployment_strategy=blue_green" \
            -auto-approve

      - name: Run production health checks
        run: |
          echo "üè• Running production health checks..."

          # Wait for deployment stabilization
          sleep 120

          # Comprehensive health checks
          curl -f https://platform.company.com/healthcheck || exit 1
          curl -f https://platform.company.com/api/catalog/health || exit 1
          curl -f https://platform.company.com/api/platform/atmos/health || exit 1

          # Check if all critical pages load
          curl -f https://platform.company.com/ || exit 1
          curl -f https://platform.company.com/catalog || exit 1

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."

          # Test critical workflows
          curl -X POST https://platform.company.com/api/platform/atmos/health \
            -H "Authorization: Bearer ${{ secrets.PLATFORM_API_TOKEN }}" || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üéâ Platform successfully deployed to production!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment tag
        run: |
          git tag "deploy-$(date +'%Y%m%d-%H%M%S')"
          git push origin --tags

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Atmos CLI
        uses: cloudposse/github-action-setup-atmos@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE_ARN }}
          aws-region: us-west-2

      - name: Rollback to previous version
        run: |
          echo "üîÑ Rolling back production deployment..."

          # Get the previous working image tag from Terraform state
          PREVIOUS_IMAGE=$(atmos terraform output backstage -s fnx-prod-us-west-2 --json | jq -r '.previous_image.value')

          # Rollback deployment
          atmos terraform apply backstage -s fnx-prod-us-west-2 \
            -var="container_image=${PREVIOUS_IMAGE}" \
            -auto-approve

      - name: Verify rollback
        run: |
          sleep 60
          curl -f https://platform.company.com/healthcheck || exit 1

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ö†Ô∏è Production deployment failed and was rolled back'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}