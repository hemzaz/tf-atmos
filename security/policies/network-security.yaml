---
# Network Security Policies for IDP Platform
# These policies implement defense-in-depth network security

apiVersion: v1
kind: Namespace
metadata:
  name: idp-system
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    istio-injection: enabled

---
# Default deny all network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: idp-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow ingress from ingress controller
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-controller
  namespace: idp-system
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backstage
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 7007

---
# Allow backstage to platform API communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backstage-to-platform-api
  namespace: idp-system
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: backstage
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: platform-api
    ports:
    - protocol: TCP
      port: 8000

---
# Allow platform API to database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: platform-api-to-database
  namespace: idp-system
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: platform-api
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: postgresql
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis access
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: redis
    ports:
    - protocol: TCP
      port: 6379

---
# Allow DNS resolution
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: idp-system
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Allow monitoring scraping
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-monitoring
  namespace: idp-system
spec:
  podSelector:
    matchLabels:
      prometheus.io/scrape: "true"
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: istiod

---
# Allow external HTTPS traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-https
  namespace: idp-system
spec:
  podSelector:
    matchLabels:
      network-policy: allow-external
  policyTypes:
  - Egress
  egress:
  - ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  # Allow GitHub API access
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 22

---
# Istio Security Policies
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: idp-system
spec:
  mtls:
    mode: STRICT

---
# Authorization policy for Backstage
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: backstage-authz
  namespace: idp-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: backstage
  rules:
  - from:
    - source:
        namespaces: ["ingress-nginx"]
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "PATCH", "DELETE"]
        paths: ["/api/*", "/catalog/*", "/*"]
  - when:
    - key: request.headers[authorization]
      notValues: [""]

---
# Authorization policy for Platform API
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: platform-api-authz
  namespace: idp-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: platform-api
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/idp-system/sa/backstage"]
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "PATCH", "DELETE"]
        paths: ["/api/*", "/health", "/metrics"]

---
# Pod Security Policy (deprecated but still used in some clusters)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: idp-platform-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'

---
# Security Context Constraints (OpenShift)
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: idp-platform-scc
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: false
allowedCapabilities: null
defaultAddCapabilities: null
requiredDropCapabilities:
- ALL
fsGroup:
  type: RunAsAny
readOnlyRootFilesystem: true
runAsUser:
  type: MustRunAsNonRoot
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret