---
# External Secrets Operator Configuration for IDP Platform
# Manages secrets from external systems (Vault, AWS Secrets Manager, etc.)

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets
  namespace: idp-system
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/ExternalSecretsRole"

---
# AWS Secrets Manager SecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: idp-system
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets

---
# HashiCorp Vault SecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: idp-system
spec:
  provider:
    vault:
      server: "https://vault.platform.company.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "idp-platform"
          serviceAccountRef:
            name: external-secrets

---
# Database credentials from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: idp-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        database-url: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}"
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
  data:
  - secretKey: username
    remoteRef:
      key: prod/idp-platform/database
      property: username
  - secretKey: password
    remoteRef:
      key: prod/idp-platform/database
      property: password
  - secretKey: host
    remoteRef:
      key: prod/idp-platform/database
      property: host
  - secretKey: port
    remoteRef:
      key: prod/idp-platform/database
      property: port
  - secretKey: database
    remoteRef:
      key: prod/idp-platform/database
      property: database

---
# Redis credentials from Vault
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: idp-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        redis-url: "redis://:{{ .password }}@{{ .host }}:{{ .port }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
  data:
  - secretKey: password
    remoteRef:
      key: idp/redis
      property: password
  - secretKey: host
    remoteRef:
      key: idp/redis
      property: host
  - secretKey: port
    remoteRef:
      key: idp/redis
      property: port

---
# GitHub integration secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: github-credentials
  namespace: idp-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: github-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        token: "{{ .token }}"
        client-id: "{{ .client_id }}"
        client-secret: "{{ .client_secret }}"
        webhook-secret: "{{ .webhook_secret }}"
  data:
  - secretKey: token
    remoteRef:
      key: prod/idp-platform/github
      property: token
  - secretKey: client_id
    remoteRef:
      key: prod/idp-platform/github
      property: client_id
  - secretKey: client_secret
    remoteRef:
      key: prod/idp-platform/github
      property: client_secret
  - secretKey: webhook_secret
    remoteRef:
      key: prod/idp-platform/github
      property: webhook_secret

---
# OIDC/OAuth credentials for Backstage
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backstage-auth-credentials
  namespace: idp-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: backstage-auth-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        session-secret: "{{ .session_secret }}"
        github-client-id: "{{ .github_client_id }}"
        github-client-secret: "{{ .github_client_secret }}"
        google-client-id: "{{ .google_client_id }}"
        google-client-secret: "{{ .google_client_secret }}"
        okta-client-id: "{{ .okta_client_id }}"
        okta-client-secret: "{{ .okta_client_secret }}"
        okta-domain: "{{ .okta_domain }}"
  data:
  - secretKey: session_secret
    remoteRef:
      key: idp/auth
      property: session_secret
  - secretKey: github_client_id
    remoteRef:
      key: idp/auth
      property: github_client_id
  - secretKey: github_client_secret
    remoteRef:
      key: idp/auth
      property: github_client_secret
  - secretKey: google_client_id
    remoteRef:
      key: idp/auth
      property: google_client_id
  - secretKey: google_client_secret
    remoteRef:
      key: idp/auth
      property: google_client_secret
  - secretKey: okta_client_id
    remoteRef:
      key: idp/auth
      property: okta_client_id
  - secretKey: okta_client_secret
    remoteRef:
      key: idp/auth
      property: okta_client_secret
  - secretKey: okta_domain
    remoteRef:
      key: idp/auth
      property: okta_domain

---
# Monitoring and alerting secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-credentials
  namespace: idp-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: monitoring-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        slack-webhook-url: "{{ .slack_webhook_url }}"
        pagerduty-integration-key: "{{ .pagerduty_integration_key }}"
        grafana-admin-password: "{{ .grafana_admin_password }}"
        prometheus-remote-write-username: "{{ .prometheus_remote_write_username }}"
        prometheus-remote-write-password: "{{ .prometheus_remote_write_password }}"
  data:
  - secretKey: slack_webhook_url
    remoteRef:
      key: prod/idp-platform/monitoring
      property: slack_webhook_url
  - secretKey: pagerduty_integration_key
    remoteRef:
      key: prod/idp-platform/monitoring
      property: pagerduty_integration_key
  - secretKey: grafana_admin_password
    remoteRef:
      key: prod/idp-platform/monitoring
      property: grafana_admin_password
  - secretKey: prometheus_remote_write_username
    remoteRef:
      key: prod/idp-platform/monitoring
      property: prometheus_remote_write_username
  - secretKey: prometheus_remote_write_password
    remoteRef:
      key: prod/idp-platform/monitoring
      property: prometheus_remote_write_password

---
# SSL/TLS Certificates from Vault PKI
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: platform-tls-cert
  namespace: idp-system
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: platform-tls-cert
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .certificate }}{{ .ca_chain }}"
        tls.key: "{{ .private_key }}"
  data:
  - secretKey: certificate
    remoteRef:
      key: pki/issue/idp-platform
      property: certificate
  - secretKey: private_key
    remoteRef:
      key: pki/issue/idp-platform
      property: private_key
  - secretKey: ca_chain
    remoteRef:
      key: pki/issue/idp-platform
      property: ca_chain

---
# API Keys and Service Account Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: service-api-keys
  namespace: idp-system
spec:
  refreshInterval: 6h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: service-api-keys
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        datadog-api-key: "{{ .datadog_api_key }}"
        newrelic-license-key: "{{ .newrelic_license_key }}"
        sentry-dsn: "{{ .sentry_dsn }}"
        sonarqube-token: "{{ .sonarqube_token }}"
        snyk-token: "{{ .snyk_token }}"
  data:
  - secretKey: datadog_api_key
    remoteRef:
      key: prod/idp-platform/integrations
      property: datadog_api_key
  - secretKey: newrelic_license_key
    remoteRef:
      key: prod/idp-platform/integrations
      property: newrelic_license_key
  - secretKey: sentry_dsn
    remoteRef:
      key: prod/idp-platform/integrations
      property: sentry_dsn
  - secretKey: sonarqube_token
    remoteRef:
      key: prod/idp-platform/integrations
      property: sonarqube_token
  - secretKey: snyk_token
    remoteRef:
      key: prod/idp-platform/integrations
      property: snyk_token

---
# Encryption keys for application-level encryption
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: encryption-keys
  namespace: idp-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: encryption-keys
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        jwt-signing-key: "{{ .jwt_signing_key }}"
        cookie-signing-key: "{{ .cookie_signing_key }}"
        csrf-token-key: "{{ .csrf_token_key }}"
        database-encryption-key: "{{ .database_encryption_key }}"
  data:
  - secretKey: jwt_signing_key
    remoteRef:
      key: idp/encryption
      property: jwt_signing_key
  - secretKey: cookie_signing_key
    remoteRef:
      key: idp/encryption
      property: cookie_signing_key
  - secretKey: csrf_token_key
    remoteRef:
      key: idp/encryption
      property: csrf_token_key
  - secretKey: database_encryption_key
    remoteRef:
      key: idp/encryption
      property: database_encryption_key

---
# ClusterSecretStore for cluster-wide secret access
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-cluster-store
spec:
  provider:
    vault:
      server: "https://vault.platform.company.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "cluster-admin"
          serviceAccountRef:
            name: external-secrets
            namespace: external-secrets-system

---
# PushSecret to sync secrets to external systems
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: backup-secrets-to-vault
  namespace: idp-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  selector:
    secret:
      name: backup-credentials
  data:
  - match:
      secretKey: backup-key
      remoteRef:
        remoteKey: idp/backup
        property: key
  - match:
      secretKey: backup-token
      remoteRef:
        remoteKey: idp/backup
        property: token