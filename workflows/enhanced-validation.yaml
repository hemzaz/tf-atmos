---
name: enhanced-validation
description: "Comprehensive Terraform validation with security scanning and best practices checks"

workflows:
  enhanced-validation:
    description: "Multi-stage validation pipeline with security and compliance checks"
    steps:
    - name: "pre-validation-setup"
      description: "Setup validation environment and dependencies"
      run:
        command: |
          set -euo pipefail

          echo "=== Enhanced Terraform Validation Pipeline ==="
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Validation ID: $(date +%Y%m%d-%H%M%S)-$$"

          # Create validation report directory
          VALIDATION_DIR="./logs/validation/$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$VALIDATION_DIR"
          echo "VALIDATION_DIR=$VALIDATION_DIR" >> $GITHUB_ENV || true

          # Validate required parameters
          if [ -z "${tenant:-}" ]; then
            echo "ERROR: Missing required parameter 'tenant'"
            echo "Usage: atmos workflow enhanced-validation tenant=<tenant> account=<account> environment=<environment>"
            exit 1
          fi

          if [ -z "${account:-}" ]; then
            echo "ERROR: Missing required parameter 'account'"
            echo "Usage: atmos workflow enhanced-validation tenant=<tenant> account=<account> environment=<environment>"
            exit 1
          fi

          if [ -z "${environment:-}" ]; then
            echo "ERROR: Missing required parameter 'environment'"
            echo "Usage: atmos workflow enhanced-validation tenant=<tenant> account=<account> environment=<environment>"
            exit 1
          fi

          STACK="${tenant}-${account}-${environment}"
          echo "Validating stack: $STACK"
          echo "STACK=$STACK" >> $GITHUB_ENV || true

          # Check AWS credentials
          echo "Validating AWS credentials..."
          aws sts get-caller-identity > "$VALIDATION_DIR/aws-identity.json"
          
          echo "✅ Pre-validation setup complete"
        env:
          AWS_SDK_LOAD_CONFIG: 1

    - name: "terraform-format-validation"
      description: "Validate Terraform formatting and syntax"
      run:
        command: |
          set -euo pipefail

          echo "\n=== Step: Terraform Format and Syntax Validation ==="
          
          VALIDATION_DIR="./logs/validation/$(date +%Y%m%d-%H%M%S)"
          FORMAT_REPORT="$VALIDATION_DIR/format-validation.txt"

          # Check Terraform formatting
          echo "Checking Terraform formatting..."
          if terraform fmt -check -recursive -diff ./components/terraform > "$FORMAT_REPORT" 2>&1; then
            echo "✅ All Terraform files are properly formatted"
          else
            echo "❌ Terraform formatting issues found:"
            cat "$FORMAT_REPORT"
            echo "Run 'terraform fmt -recursive ./components/terraform' to fix formatting"
            exit 1
          fi

          # Validate Terraform syntax for all components
          echo "\nValidating Terraform syntax..."
          SYNTAX_ERRORS=0
          
          for component_dir in ./components/terraform/*/; do
            if [ -d "$component_dir" ]; then
              component=$(basename "$component_dir")
              echo "Validating syntax for component: $component"
              
              cd "$component_dir"
              if terraform init -backend=false -upgrade=false > /dev/null 2>&1; then
                if terraform validate > "$VALIDATION_DIR/${component}-syntax.txt" 2>&1; then
                  echo "✅ $component syntax validation passed"
                else
                  echo "❌ $component syntax validation failed"
                  cat "$VALIDATION_DIR/${component}-syntax.txt"
                  SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
                fi
              else
                echo "⚠️  Could not initialize $component for syntax validation"
              fi
              cd - > /dev/null
            fi
          done

          if [ $SYNTAX_ERRORS -gt 0 ]; then
            echo "\n❌ $SYNTAX_ERRORS components have syntax errors"
            exit 1
          fi

          echo "\n✅ All components passed syntax validation"
        env:
          AWS_SDK_LOAD_CONFIG: 1

    - name: "security-scanning"
      description: "Run security scanning with multiple tools"
      run:
        command: |
          set -euo pipefail

          echo "\n=== Step: Security Scanning ==="
          
          VALIDATION_DIR="./logs/validation/$(date +%Y%m%d-%H%M%S)"
          SECURITY_REPORT="$VALIDATION_DIR/security-scan.json"
          SKIP_SECURITY="${skip_security:-false}"

          if [ "$SKIP_SECURITY" = "true" ]; then
            echo "⚠️  Security scanning skipped (skip_security=true)"
            exit 0
          fi

          # Initialize security report
          echo '{"timestamp": "'$(date -u '+%Y-%m-%dT%H:%M:%SZ')'", "scans": {}}' > "$SECURITY_REPORT"

          # tfsec security scanning
          if command -v tfsec >/dev/null 2>&1; then
            echo "Running tfsec security scan..."
            tfsec ./components/terraform \
              --format json \
              --out "$VALIDATION_DIR/tfsec-results.json" \
              --soft-fail \
              --minimum-severity MEDIUM || true
            
            # Count critical/high issues
            CRITICAL_HIGH_COUNT=$(jq '[.results[] | select(.severity == "CRITICAL" or .severity == "HIGH")] | length' "$VALIDATION_DIR/tfsec-results.json" 2>/dev/null || echo "0")
            echo "tfsec scan complete: $CRITICAL_HIGH_COUNT critical/high issues found"
            
            # Update security report
            jq --argjson tfsec "$(cat "$VALIDATION_DIR/tfsec-results.json")" \
               '.scans.tfsec = $tfsec' "$SECURITY_REPORT" > "$SECURITY_REPORT.tmp" && mv "$SECURITY_REPORT.tmp" "$SECURITY_REPORT"
          else
            echo "⚠️  tfsec not found, skipping static security analysis"
            echo "Install with: go install github.com/aquasecurity/tfsec/cmd/tfsec@latest"
          fi

          # Checkov security scanning
          if command -v checkov >/dev/null 2>&1; then
            echo "Running Checkov security scan..."
            checkov -d ./components/terraform \
              --output json \
              --output-file "$VALIDATION_DIR/checkov-results.json" \
              --soft-fail \
              --quiet || true
            
            echo "Checkov scan complete"
            
            # Update security report
            if [ -f "$VALIDATION_DIR/checkov-results.json" ]; then
              jq --argjson checkov "$(cat "$VALIDATION_DIR/checkov-results.json")" \
                 '.scans.checkov = $checkov' "$SECURITY_REPORT" > "$SECURITY_REPORT.tmp" && mv "$SECURITY_REPORT.tmp" "$SECURITY_REPORT"
            fi
          else
            echo "⚠️  Checkov not found, skipping policy-as-code scanning"
            echo "Install with: pip install checkov"
          fi

          # Terrascan security scanning
          if command -v terrascan >/dev/null 2>&1; then
            echo "Running Terrascan security scan..."
            terrascan scan -d ./components/terraform \
              -o json \
              --output-file "$VALIDATION_DIR/terrascan-results.json" \
              --severity medium \
              --non-recursive || true
            
            echo "Terrascan scan complete"
            
            # Update security report
            if [ -f "$VALIDATION_DIR/terrascan-results.json" ]; then
              jq --argjson terrascan "$(cat "$VALIDATION_DIR/terrascan-results.json")" \
                 '.scans.terrascan = $terrascan' "$SECURITY_REPORT" > "$SECURITY_REPORT.tmp" && mv "$SECURITY_REPORT.tmp" "$SECURITY_REPORT"
            fi
          else
            echo "⚠️  Terrascan not found, skipping compliance scanning"
            echo "Install from: https://github.com/tenable/terrascan"
          fi

          echo "\n✅ Security scanning complete. Results saved to $SECURITY_REPORT"
        env:
          AWS_SDK_LOAD_CONFIG: 1

    - name: "compliance-validation"
      description: "Validate compliance with organizational policies"
      run:
        command: |
          set -euo pipefail

          echo "\n=== Step: Compliance Validation ==="
          
          VALIDATION_DIR="./logs/validation/$(date +%Y%m%d-%H%M%S)"
          COMPLIANCE_REPORT="$VALIDATION_DIR/compliance-report.json"

          # Initialize compliance report
          cat > "$COMPLIANCE_REPORT" << EOF
          {
            "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "stack": "${STACK}",
            "compliance_checks": {
              "naming_conventions": {},
              "tagging_compliance": {},
              "security_policies": {},
              "resource_policies": {}
            },
            "violations": [],
            "recommendations": []
          }
          EOF

          echo "Running compliance checks..."

          # Check naming conventions
          echo "Checking naming conventions..."
          NAMING_VIOLATIONS=0
          
          # Check for consistent naming patterns
          for tf_file in $(find ./components/terraform -name "*.tf" -type f); do
            # Check for hardcoded resource names (should use variables/locals)
            if grep -q '"[a-z0-9-]*-hardcoded-' "$tf_file" 2>/dev/null; then
              echo "⚠️  Potential hardcoded resource name in $tf_file"
              NAMING_VIOLATIONS=$((NAMING_VIOLATIONS + 1))
            fi
          done

          # Check tagging compliance
          echo "Checking tagging compliance..."
          TAGGING_VIOLATIONS=0
          
          # Look for resources without proper tags
          for tf_file in $(find ./components/terraform -name "*.tf" -type f); do
            # Count resources and tags (basic heuristic)
            RESOURCE_COUNT=$(grep -c '^resource "' "$tf_file" 2>/dev/null || echo "0")
            TAG_COUNT=$(grep -c 'tags.*=' "$tf_file" 2>/dev/null || echo "0")
            
            if [ "$RESOURCE_COUNT" -gt 0 ] && [ "$TAG_COUNT" -eq 0 ]; then
              echo "⚠️  No tags found in $tf_file (contains $RESOURCE_COUNT resources)"
              TAGGING_VIOLATIONS=$((TAGGING_VIOLATIONS + 1))
            fi
          done

          # Check for required variables and validation
          echo "Checking variable validation..."
          VALIDATION_VIOLATIONS=0
          
          for vars_file in $(find ./components/terraform -name "variables.tf" -type f); do
            # Check if variables have descriptions and validation blocks
            VARS_WITHOUT_DESC=$(grep -A 5 '^variable "' "$vars_file" | grep -c 'description.*=' || echo "0")
            VARS_WITH_VALIDATION=$(grep -A 10 '^variable "' "$vars_file" | grep -c 'validation {' || echo "0")
            
            if [ -f "$vars_file" ]; then
              component=$(dirname "$vars_file" | xargs basename)
              echo "Component $component: variables with validation: $VARS_WITH_VALIDATION"
            fi
          done

          # Update compliance report
          jq --argjson naming_violations $NAMING_VIOLATIONS \
             --argjson tagging_violations $TAGGING_VIOLATIONS \
             --argjson validation_violations $VALIDATION_VIOLATIONS \
             '.compliance_checks.naming_conventions.violations = $naming_violations |
              .compliance_checks.tagging_compliance.violations = $tagging_violations |
              .compliance_checks.resource_policies.validation_violations = $validation_violations' \
             "$COMPLIANCE_REPORT" > "$COMPLIANCE_REPORT.tmp" && mv "$COMPLIANCE_REPORT.tmp" "$COMPLIANCE_REPORT"

          # Generate recommendations
          if [ $NAMING_VIOLATIONS -gt 0 ] || [ $TAGGING_VIOLATIONS -gt 0 ] || [ $VALIDATION_VIOLATIONS -gt 0 ]; then
            echo "\n⚠️  Compliance issues found:"
            echo "   - Naming violations: $NAMING_VIOLATIONS"
            echo "   - Tagging violations: $TAGGING_VIOLATIONS"
            echo "   - Validation violations: $VALIDATION_VIOLATIONS"
            echo "\nRecommendations:"
            echo "   - Use consistent naming patterns with variables/locals"
            echo "   - Apply standard tags to all resources"
            echo "   - Add validation blocks to all variables"
          else
            echo "✅ All compliance checks passed"
          fi

          echo "Compliance report saved to $COMPLIANCE_REPORT"
        env:
          AWS_SDK_LOAD_CONFIG: 1

    - name: "component-validation"
      description: "Validate individual components against stack configuration"
      run:
        command: |
          set -euo pipefail

          echo "\n=== Step: Component Validation ==="
          
          VALIDATION_DIR="./logs/validation/$(date +%Y%m%d-%H%M%S)"
          COMPONENT_REPORT="$VALIDATION_DIR/component-validation.json"

          # Get components for the stack
          COMPONENTS=$(atmos list components -s "${STACK}" 2>/dev/null | tr '\n' ' ' || echo "")

          if [ -z "$COMPONENTS" ]; then
            echo "⚠️  No components found for stack $STACK"
            exit 0
          fi

          echo "Validating components: $COMPONENTS"

          # Initialize component report
          cat > "$COMPONENT_REPORT" << EOF
          {
            "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "stack": "${STACK}",
            "components": {},
            "summary": {
              "total": 0,
              "passed": 0,
              "failed": 0,
              "warnings": 0
            }
          }
          EOF

          TOTAL_COMPONENTS=0
          PASSED_COMPONENTS=0
          FAILED_COMPONENTS=0
          WARNING_COMPONENTS=0

          # Validate each component
          for component in $COMPONENTS; do
            echo "\nValidating component: $component"
            TOTAL_COMPONENTS=$((TOTAL_COMPONENTS + 1))
            
            COMPONENT_STATUS="unknown"
            COMPONENT_MESSAGES=[]
            
            # Run atmos terraform validate
            if atmos terraform validate "$component" -s "$STACK" > "$VALIDATION_DIR/${component}-validation.txt" 2>&1; then
              echo "✅ Component $component validation passed"
              COMPONENT_STATUS="passed"
              PASSED_COMPONENTS=$((PASSED_COMPONENTS + 1))
            else
              echo "❌ Component $component validation failed"
              COMPONENT_STATUS="failed"
              FAILED_COMPONENTS=$((FAILED_COMPONENTS + 1))
              
              # Show validation errors
              if [ -f "$VALIDATION_DIR/${component}-validation.txt" ]; then
                echo "Validation errors for $component:"
                head -10 "$VALIDATION_DIR/${component}-validation.txt"
              fi
            fi

            # Check for deprecated resources/providers
            component_dir="./components/terraform/$component"
            if [ -d "$component_dir" ]; then
              # Check for deprecated AWS provider syntax
              if grep -r 'provider "aws"' "$component_dir"/*.tf 2>/dev/null | grep -q 'version.*[<>]=.*[0-9]'; then
                echo "⚠️  Component $component may use deprecated provider syntax"
                if [ "$COMPONENT_STATUS" = "passed" ]; then
                  WARNING_COMPONENTS=$((WARNING_COMPONENTS + 1))
                  PASSED_COMPONENTS=$((PASSED_COMPONENTS - 1))
                  COMPONENT_STATUS="warning"
                fi
              fi
            fi

            # Update component report
            jq --arg component "$component" \
               --arg status "$COMPONENT_STATUS" \
               --arg validation_file "${component}-validation.txt" \
               '.components[$component] = {"status": $status, "validation_file": $validation_file}' \
               "$COMPONENT_REPORT" > "$COMPONENT_REPORT.tmp" && mv "$COMPONENT_REPORT.tmp" "$COMPONENT_REPORT"
          done

          # Update summary
          jq --argjson total $TOTAL_COMPONENTS \
             --argjson passed $PASSED_COMPONENTS \
             --argjson failed $FAILED_COMPONENTS \
             --argjson warnings $WARNING_COMPONENTS \
             '.summary = {"total": $total, "passed": $passed, "failed": $failed, "warnings": $warnings}' \
             "$COMPONENT_REPORT" > "$COMPONENT_REPORT.tmp" && mv "$COMPONENT_REPORT.tmp" "$COMPONENT_REPORT"

          echo "\n=== Component Validation Summary ==="
          echo "Total components: $TOTAL_COMPONENTS"
          echo "Passed: $PASSED_COMPONENTS"
          echo "Failed: $FAILED_COMPONENTS"
          echo "Warnings: $WARNING_COMPONENTS"

          if [ $FAILED_COMPONENTS -gt 0 ]; then
            echo "\n❌ Component validation failed"
            exit 1
          elif [ $WARNING_COMPONENTS -gt 0 ]; then
            echo "\n⚠️  Component validation completed with warnings"
          else
            echo "\n✅ All component validations passed"
          fi

          echo "Component report saved to $COMPONENT_REPORT"
        env:
          AWS_SDK_LOAD_CONFIG: 1

    - name: "generate-validation-summary"
      description: "Generate comprehensive validation summary report"
      run:
        command: |
          set -euo pipefail

          echo "\n=== Step: Generate Validation Summary ==="
          
          VALIDATION_DIR="./logs/validation/$(date +%Y%m%d-%H%M%S)"
          SUMMARY_REPORT="$VALIDATION_DIR/validation-summary.json"

          # Combine all validation results
          cat > "$SUMMARY_REPORT" << EOF
          {
            "validation_id": "$(date +%Y%m%d-%H%M%S)-$$",
            "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')",
            "stack": "${STACK}",
            "validation_stages": {
              "format_validation": "completed",
              "security_scanning": "completed",
              "compliance_validation": "completed",
              "component_validation": "completed"
            },
            "overall_status": "pending",
            "recommendations": [],
            "next_steps": []
          }
          EOF

          # Determine overall status
          OVERALL_STATUS="passed"
          
          # Check if any validation files indicate failures
          if find "$VALIDATION_DIR" -name "*-validation.txt" -exec grep -l "Error\|Failed\|CRITICAL\|HIGH" {} \; | head -1 >/dev/null 2>&1; then
            OVERALL_STATUS="failed"
          elif find "$VALIDATION_DIR" -name "*-results.json" -exec grep -l "MEDIUM\|WARNING" {} \; | head -1 >/dev/null 2>&1; then
            OVERALL_STATUS="warnings"
          fi

          # Update overall status
          jq --arg status "$OVERALL_STATUS" \
             '.overall_status = $status' \
             "$SUMMARY_REPORT" > "$SUMMARY_REPORT.tmp" && mv "$SUMMARY_REPORT.tmp" "$SUMMARY_REPORT"

          # Generate recommendations based on findings
          RECOMMENDATIONS=""
          
          if [ -f "$VALIDATION_DIR/tfsec-results.json" ]; then
            CRITICAL_COUNT=$(jq '[.results[] | select(.severity == "CRITICAL")] | length' "$VALIDATION_DIR/tfsec-results.json" 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              RECOMMENDATIONS="$RECOMMENDATIONS,\"Address $CRITICAL_COUNT critical security issues identified by tfsec\""
            fi
          fi

          if [ -f "$VALIDATION_DIR/compliance-report.json" ]; then
            NAMING_VIOLATIONS=$(jq '.compliance_checks.naming_conventions.violations // 0' "$VALIDATION_DIR/compliance-report.json" 2>/dev/null || echo "0")
            if [ "$NAMING_VIOLATIONS" -gt 0 ]; then
              RECOMMENDATIONS="$RECOMMENDATIONS,\"Implement consistent naming conventions\""
            fi
          fi

          # Clean up recommendations format
          RECOMMENDATIONS="[${RECOMMENDATIONS#,}]"
          if [ "$RECOMMENDATIONS" = "[]" ]; then
            RECOMMENDATIONS='["No specific recommendations - validation passed successfully"]'
          fi

          # Update recommendations
          jq --argjson recommendations "$RECOMMENDATIONS" \
             '.recommendations = $recommendations' \
             "$SUMMARY_REPORT" > "$SUMMARY_REPORT.tmp" && mv "$SUMMARY_REPORT.tmp" "$SUMMARY_REPORT"

          echo "\n=== Enhanced Validation Summary ==="
          echo "Validation ID: $(jq -r '.validation_id' "$SUMMARY_REPORT")"
          echo "Stack: ${STACK}"
          echo "Overall Status: $(jq -r '.overall_status' "$SUMMARY_REPORT" | tr '[:lower:]' '[:upper:]')"
          echo "Timestamp: $(jq -r '.timestamp' "$SUMMARY_REPORT")"
          
          echo "\nValidation Artifacts:"
          echo "  Summary Report: $SUMMARY_REPORT"
          if [ -d "$VALIDATION_DIR" ]; then
            echo "  Detailed Reports: $VALIDATION_DIR"
            ls -la "$VALIDATION_DIR"
          fi

          # Print final status
          case "$OVERALL_STATUS" in
            "passed")
              echo "\n✅ Enhanced validation completed successfully!"
              ;;
            "warnings")
              echo "\n⚠️  Enhanced validation completed with warnings"
              echo "Review the detailed reports for recommended improvements"
              ;;
            "failed")
              echo "\n❌ Enhanced validation failed"
              echo "Critical issues found that must be addressed before deployment"
              exit 1
              ;;
          esac
        env:
          AWS_SDK_LOAD_CONFIG: 1