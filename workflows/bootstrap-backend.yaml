---
name: bootstrap-backend
description: "Initialize the Terraform backend (S3 bucket and DynamoDB table) with enhanced security and cross-account support"

workflows:
  bootstrap:
    steps:
    - run:
        command: |
          # =============================================================================
          # Enhanced Terraform Backend Bootstrap Workflow
          # =============================================================================
          # This workflow creates AWS backend infrastructure using the new aws-setup.sh script
          # with enhanced security, validation, and cross-account support.
          
          set -euo pipefail
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          WHITE='\033[1;37m'
          NC='\033[0m' # No Color
          
          log_info() {
              echo -e "${BLUE}‚ÑπÔ∏è  $*${NC}"
          }
          
          log_success() {
              echo -e "${GREEN}‚úÖ $*${NC}"
          }
          
          log_warning() {
              echo -e "${YELLOW}‚ö†Ô∏è  $*${NC}"
          }
          
          log_error() {
              echo -e "${RED}‚ùå $*${NC}"
          }
          
          # =============================================================================
          # Parameter Validation and Setup
          # =============================================================================
          
          log_info "Starting Enhanced Terraform Backend Bootstrap"
          
          # Validate required parameters
          REQUIRED_PARAMS=()
          if [ -z "${tenant:-}" ]; then
            REQUIRED_PARAMS+=("tenant")
          fi
          
          if [ -z "${account:-}" ]; then
            REQUIRED_PARAMS+=("account")
          fi
          
          if [ -z "${environment:-}" ]; then
            REQUIRED_PARAMS+=("environment")
          fi
          
          if [ ${#REQUIRED_PARAMS[@]} -gt 0 ]; then
            log_error "Missing required parameters: ${REQUIRED_PARAMS[*]}"
            echo
            echo "${WHITE}Usage:${NC}"
            echo "  atmos workflow bootstrap-backend tenant=<tenant> account=<account> environment=<environment> [OPTIONS]"
            echo
            echo "${WHITE}Required Parameters:${NC}"
            echo "  tenant=<name>        Tenant name (e.g., 'fnx')"
            echo "  account=<name>       Account name (e.g., 'dev', 'prod')"
            echo "  environment=<name>   Environment name (e.g., 'testenv-01')"
            echo
            echo "${WHITE}Optional Parameters:${NC}"
            echo "  region=<region>      AWS region (default: us-east-1)"
            echo "  assume_role=<arn>    Cross-account IAM role ARN"
            echo "  kms_key=<id>         Existing KMS key ID for encryption"
            echo "  dry_run=true         Show what would be created without changes"
            echo "  force=true           Skip confirmation prompts"
            echo
            echo "${WHITE}Examples:${NC}"
            echo "  atmos workflow bootstrap-backend tenant=fnx account=dev environment=testenv-01"
            echo "  atmos workflow bootstrap-backend tenant=fnx account=prod environment=production region=us-west-2"
            echo "  atmos workflow bootstrap-backend tenant=fnx account=prod environment=prod assume_role=arn:aws:iam::123456789:role/TerraformRole"
            exit 1
          fi
          
          # Set default values
          REGION=${region:-"us-east-1"}
          ASSUME_ROLE_ARN=${assume_role:-""}
          KMS_KEY_ID=${kms_key:-""}
          DRY_RUN=${dry_run:-"false"}
          FORCE=${force:-"false"}
          
          # =============================================================================
          # AWS Setup Script Execution
          # =============================================================================
          
          log_info "Backend Configuration:"
          echo "  Tenant:      ${tenant}"
          echo "  Account:     ${account}"
          echo "  Environment: ${environment}"
          echo "  Region:      ${REGION}"
          
          if [ -n "$ASSUME_ROLE_ARN" ]; then
            echo "  Cross-Account Role: ${ASSUME_ROLE_ARN}"
          fi
          
          if [ -n "$KMS_KEY_ID" ]; then
            echo "  KMS Key: ${KMS_KEY_ID}"
          fi
          
          # Check if aws-setup.sh script exists
          SCRIPT_PATH="./scripts/aws-setup.sh"
          if [ ! -f "$SCRIPT_PATH" ]; then
            log_error "aws-setup.sh script not found at: $SCRIPT_PATH"
            log_info "Please ensure the script exists and is executable"
            exit 1
          fi
          
          if [ ! -x "$SCRIPT_PATH" ]; then
            log_warning "Making aws-setup.sh executable..."
            chmod +x "$SCRIPT_PATH"
          fi
          
          # Build command arguments
          SETUP_ARGS=(
            "--tenant" "$tenant"
            "--account" "$account"
            "--environment" "$environment"
            "--region" "$REGION"
          )
          
          if [ -n "$ASSUME_ROLE_ARN" ]; then
            SETUP_ARGS+=("--assume-role" "$ASSUME_ROLE_ARN")
          fi
          
          if [ -n "$KMS_KEY_ID" ]; then
            SETUP_ARGS+=("--kms-key-id" "$KMS_KEY_ID")
          fi
          
          if [ "$DRY_RUN" == "true" ]; then
            SETUP_ARGS+=("--dry-run")
          fi
          
          if [ "$FORCE" == "true" ]; then
            SETUP_ARGS+=("--force")
          fi
          
          # Enable debug if requested
          if [ "${debug:-false}" == "true" ]; then
            SETUP_ARGS+=("--debug")
          fi
          
          # =============================================================================
          # Execute AWS Setup
          # =============================================================================
          
          log_info "Executing AWS backend setup script..."
          
          # Execute the setup script with all arguments
          if "$SCRIPT_PATH" "${SETUP_ARGS[@]}"; then
            log_success "AWS backend setup completed successfully"
            
            # =============================================================================
            # Post-Setup Actions
            # =============================================================================
            
            # Generate resource names for verification
            BUCKET_NAME="${tenant}-${account}-${environment}-terraform-state"
            DYNAMODB_TABLE="${tenant}-${account}-${environment}-terraform-locks"
            
            log_info "Verifying created resources..."
            
            # Verify S3 bucket (if not dry run)
            if [ "$DRY_RUN" != "true" ]; then
              if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
                log_success "S3 bucket verified: $BUCKET_NAME"
              else
                log_warning "Could not verify S3 bucket: $BUCKET_NAME"
              fi
              
              # Verify DynamoDB table
              if aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region "$REGION" 2>/dev/null >/dev/null; then
                log_success "DynamoDB table verified: $DYNAMODB_TABLE"
              else
                log_warning "Could not verify DynamoDB table: $DYNAMODB_TABLE"
              fi
            fi
            
            # =============================================================================
            # Next Steps Instructions
            # =============================================================================
            
            echo
            echo "${WHITE}===========================================${NC}"
            echo "${WHITE}üéâ Backend Bootstrap Completed Successfully${NC}"
            echo "${WHITE}===========================================${NC}"
            echo
            echo "${WHITE}Next Steps:${NC}"
            echo "1. Review the generated configuration in: backend-configs/"
            echo "2. Apply the backend component:"
            echo "   ${BLUE}atmos terraform apply backend -s ${tenant}-${account}-${environment}${NC}"
            echo "3. Initialize other components with the new backend"
            echo
            echo "${WHITE}Quick Commands:${NC}"
            echo "   ${BLUE}# Validate backend component${NC}"
            echo "   atmos terraform validate backend -s ${tenant}-${account}-${environment}"
            echo
            echo "   ${BLUE}# Plan backend infrastructure${NC}"
            echo "   atmos terraform plan backend -s ${tenant}-${account}-${environment}"
            echo
            echo "   ${BLUE}# Apply backend infrastructure${NC}"
            echo "   atmos terraform apply backend -s ${tenant}-${account}-${environment}"
            echo
            
            # Show configuration snippet if available
            CONFIG_FILE="./backend-configs/${tenant}-${account}-${environment}.yaml"
            if [ -f "$CONFIG_FILE" ]; then
              echo "${WHITE}Generated Configuration Preview:${NC}"
              head -20 "$CONFIG_FILE" | sed 's/^/   /'
              echo "   ..."
              echo "   ${BLUE}(Full configuration in: $CONFIG_FILE)${NC}"
            fi
            
          else
            log_error "AWS backend setup failed"
            echo
            echo "${WHITE}Troubleshooting:${NC}"
            echo "1. Check AWS credentials: aws sts get-caller-identity"
            echo "2. Verify AWS permissions for S3 and DynamoDB"
            echo "3. Check the setup log file in: logs/"
            echo "4. Run with debug flag: debug=true"
            echo
            exit 1
          fi
          
        env:
          AWS_SDK_LOAD_CONFIG: 1

  # =============================================================================
  # Additional Workflows for Backend Management
  # =============================================================================
  
  verify:
    description: "Verify existing backend infrastructure"
    steps:
    - run:
        command: |
          set -euo pipefail
          
          # Colors
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          RED='\033[0;31m'
          NC='\033[0m'
          
          echo -e "${BLUE}Verifying backend infrastructure...${NC}"
          
          # Validate parameters
          if [ -z "${tenant:-}" ] || [ -z "${account:-}" ] || [ -z "${environment:-}" ]; then
            echo -e "${RED}ERROR: Missing parameters. Usage: tenant=<name> account=<name> environment=<name>${NC}"
            exit 1
          fi
          
          REGION=${region:-"us-east-1"}
          BUCKET_NAME="${tenant}-${account}-${environment}-terraform-state"
          DYNAMODB_TABLE="${tenant}-${account}-${environment}-terraform-locks"
          
          echo "Checking resources for: ${tenant}-${account}-${environment}"
          echo "Region: ${REGION}"
          echo
          
          # Check S3 bucket
          echo -n "S3 Bucket ($BUCKET_NAME): "
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ EXISTS${NC}"
            
            # Check versioning
            VERSIONING=$(aws s3api get-bucket-versioning --bucket "$BUCKET_NAME" --query 'Status' --output text 2>/dev/null || echo "None")
            echo "  Versioning: $VERSIONING"
            
            # Check encryption
            if aws s3api get-bucket-encryption --bucket "$BUCKET_NAME" >/dev/null 2>&1; then
              echo -e "  Encryption: ${GREEN}‚úÖ Enabled${NC}"
            else
              echo -e "  Encryption: ${RED}‚ùå Not configured${NC}"
            fi
          else
            echo -e "${RED}‚ùå NOT FOUND${NC}"
          fi
          
          # Check DynamoDB table
          echo -n "DynamoDB Table ($DYNAMODB_TABLE): "
          if aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region "$REGION" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ EXISTS${NC}"
            
            # Check point-in-time recovery
            PITR=$(aws dynamodb describe-continuous-backups --table-name "$DYNAMODB_TABLE" --region "$REGION" --query 'ContinuousBackupsDescription.PointInTimeRecoveryDescription.PointInTimeRecoveryStatus' --output text 2>/dev/null || echo "UNKNOWN")
            echo "  Point-in-Time Recovery: $PITR"
          else
            echo -e "${RED}‚ùå NOT FOUND${NC}"
          fi
          
          echo
          echo -e "${GREEN}‚úÖ Verification completed${NC}"

  cleanup:
    description: "Clean up backend infrastructure (DANGEROUS - use with caution)"
    steps:
    - run:
        command: |
          set -euo pipefail
          
          # Colors
          RED='\033[0;31m'
          YELLOW='\033[1;33m'
          GREEN='\033[0;32m'
          WHITE='\033[1;37m'
          NC='\033[0m'
          
          echo -e "${RED}‚ö†Ô∏è  DANGER: Backend Infrastructure Cleanup${NC}"
          echo -e "${RED}This will DELETE your Terraform backend infrastructure!${NC}"
          echo
          
          # Validate parameters
          if [ -z "${tenant:-}" ] || [ -z "${account:-}" ] || [ -z "${environment:-}" ]; then
            echo -e "${RED}ERROR: Missing parameters. Usage: tenant=<name> account=<name> environment=<name>${NC}"
            exit 1
          fi
          
          REGION=${region:-"us-east-1"}
          BUCKET_NAME="${tenant}-${account}-${environment}-terraform-state"
          DYNAMODB_TABLE="${tenant}-${account}-${environment}-terraform-locks"
          FORCE_CLEANUP=${force:-"false"}
          
          echo "Resources to be deleted:"
          echo "  S3 Bucket: $BUCKET_NAME"
          echo "  DynamoDB Table: $DYNAMODB_TABLE"
          echo "  Region: $REGION"
          echo
          
          # Safety confirmation (unless forced)
          if [ "$FORCE_CLEANUP" != "true" ]; then
            echo -e "${WHITE}Type '${tenant}-${account}-${environment}' to confirm deletion:${NC}"
            read -r CONFIRMATION
            
            if [ "$CONFIRMATION" != "${tenant}-${account}-${environment}" ]; then
              echo -e "${GREEN}Cleanup cancelled - confirmation didn't match${NC}"
              exit 0
            fi
            
            echo -e "${YELLOW}Are you absolutely sure? This cannot be undone! (y/N):${NC}"
            read -n 1 -r FINAL_CONFIRM
            echo
            
            if [[ ! $FINAL_CONFIRM =~ ^[Yy]$ ]]; then
              echo -e "${GREEN}Cleanup cancelled${NC}"
              exit 0
            fi
          fi
          
          echo -e "${YELLOW}Starting cleanup...${NC}"
          
          # Delete S3 bucket contents and bucket
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Emptying S3 bucket: $BUCKET_NAME"
            aws s3 rm "s3://$BUCKET_NAME" --recursive || true
            
            echo "Deleting S3 bucket: $BUCKET_NAME"
            aws s3 rb "s3://$BUCKET_NAME" --force || true
          else
            echo "S3 bucket $BUCKET_NAME not found (may already be deleted)"
          fi
          
          # Delete DynamoDB table
          if aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region "$REGION" >/dev/null 2>&1; then
            echo "Deleting DynamoDB table: $DYNAMODB_TABLE"
            aws dynamodb delete-table --table-name "$DYNAMODB_TABLE" --region "$REGION" || true
            
            echo "Waiting for table deletion to complete..."
            aws dynamodb wait table-not-exists --table-name "$DYNAMODB_TABLE" --region "$REGION" || true
          else
            echo "DynamoDB table $DYNAMODB_TABLE not found (may already be deleted)"
          fi
          
          echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
          echo -e "${YELLOW}‚ö†Ô∏è  Remember to remove any backend configurations from your Terraform code${NC}"
