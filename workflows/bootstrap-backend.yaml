name: bootstrap-backend
description: "Initialize the Terraform backend (S3 bucket and DynamoDB table) with enhanced security"

workflows:
  bootstrap:
    steps:
    - run:
        command: |
          # Get CLI version automatically (in a cross-platform way)
          GAIA_CLI_VERSION=$(gaia version | sed -n 's/.*Gaia \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/p')
          echo "Using Gaia CLI version: ${GAIA_CLI_VERSION}"
          
          # Validate required parameters
          if [ -z "${tenant}" ]; then
            echo "ERROR: Missing required parameter 'tenant'"
            echo "Usage: gaia workflow bootstrap-backend tenant=<tenant> region=<region> [bucket_suffix=<suffix>]"
            exit 1
          fi
          
          if [ -z "${region}" ]; then
            echo "ERROR: Missing required parameter 'region'"
            echo "Usage: gaia workflow bootstrap-backend tenant=<tenant> region=<region> [bucket_suffix=<suffix>]"
            exit 1
          fi
          
          # Generate bucket and table names
          BUCKET_SUFFIX=${bucket_suffix:-"terraform-state"}
          DYNAMODB_SUFFIX=${dynamodb_suffix:-"terraform-locks"}
          
          # Format names with proper kebab-case
          BUCKET_NAME="${tenant}-${BUCKET_SUFFIX}"
          DYNAMODB_TABLE_NAME="${tenant}-${DYNAMODB_SUFFIX}"
          
          # Check if AWS credentials are valid
          echo "Validating AWS credentials..."
          if ! aws sts get-caller-identity > /dev/null; then
            echo "ERROR: Invalid AWS credentials. Please check your credentials and try again."
            exit 1
          fi
          
          # Check if the bucket already exists
          echo "Checking if bucket already exists..."
          if aws s3api head-bucket --bucket ${BUCKET_NAME} 2>/dev/null; then
            echo "Bucket ${BUCKET_NAME} already exists. Skipping bucket creation."
          else
            # Create S3 bucket for Terraform state with enhanced security
            echo "Creating S3 bucket for Terraform state: ${BUCKET_NAME}"
            
            # Handle us-east-1 region differently (no LocationConstraint needed)
            if [ "${region}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket ${BUCKET_NAME} --region ${region}
            else
              aws s3api create-bucket --bucket ${BUCKET_NAME} --region ${region} --create-bucket-configuration LocationConstraint=${region}
            fi
            
            # Enable versioning on the bucket
            echo "Enabling versioning on bucket: ${BUCKET_NAME}"
            aws s3api put-bucket-versioning --bucket ${BUCKET_NAME} --versioning-configuration Status=Enabled
            
            # Enable server-side encryption
            echo "Enabling default encryption on bucket: ${BUCKET_NAME}"
            aws s3api put-bucket-encryption --bucket ${BUCKET_NAME} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
            
            # Block public access
            echo "Blocking public access to bucket: ${BUCKET_NAME}"
            aws s3api put-public-access-block --bucket ${BUCKET_NAME} --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
          fi
          
          # Check if the DynamoDB table already exists
          echo "Checking if DynamoDB table already exists..."
          if aws dynamodb describe-table --table-name ${DYNAMODB_TABLE_NAME} --region ${region} 2>/dev/null; then
            echo "DynamoDB table ${DYNAMODB_TABLE_NAME} already exists. Skipping table creation."
          else
            # Create DynamoDB table for state locking
            echo "Creating DynamoDB table for state locking: ${DYNAMODB_TABLE_NAME}"
            aws dynamodb create-table --table-name ${DYNAMODB_TABLE_NAME} --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --billing-mode PAY_PER_REQUEST --region ${region}
            
            # Wait for table to be created and active
            echo "Waiting for DynamoDB table to become active..."
            aws dynamodb wait table-exists --table-name ${DYNAMODB_TABLE_NAME} --region ${region}
          fi
          
          # Add tags to resources
          echo "Adding tags to resources..."
          TAGS='[{"Key":"ManagedBy","Value":"Gaia"},{"Key":"Environment","Value":"Terraform"},{"Key":"CreatedBy","Value":"bootstrap-workflow"}]'
          
          # Tag S3 bucket
          aws s3api put-bucket-tagging --bucket ${BUCKET_NAME} --tagging "TagSet=${TAGS}"
          
          # Tag DynamoDB table
          aws dynamodb tag-resource --resource-arn "arn:aws:dynamodb:${region}:$(aws sts get-caller-identity --query 'Account' --output text):table/${DYNAMODB_TABLE_NAME}" --tags "Key=ManagedBy,Value=Gaia" "Key=Environment,Value=Terraform" "Key=CreatedBy,Value=bootstrap-workflow"
          
          echo "=========================================================="
          echo "Backend infrastructure successfully created:"
          echo "S3 Bucket: ${BUCKET_NAME}"
          echo "DynamoDB Table: ${DYNAMODB_TABLE_NAME}"
          echo "Region: ${region}"
          echo ""
          echo "Add the following to your backend configuration:"
          echo "```yaml"
          echo "import:"
          echo "  - catalog/backend"
          echo ""
          echo "vars:"
          echo "  bucket_name: \"${BUCKET_NAME}\""
          echo "  dynamodb_table_name: \"${DYNAMODB_TABLE_NAME}\""
          echo "  region: \"${region}\""
          echo "```"
          echo "=========================================================="
          
          # Copy template to clipboard if clipboard utility is available
          CONFIG="import:\n  - catalog/backend\n\nvars:\n  bucket_name: \"${BUCKET_NAME}\"\n  dynamodb_table_name: \"${DYNAMODB_TABLE_NAME}\"\n  region: \"${region}\""
          
          # Try different clipboard utilities based on OS
          if [[ "$OSTYPE" == "darwin"* ]] && command -v pbcopy > /dev/null; then
            # macOS
            echo -e "$CONFIG" | pbcopy
            echo "Configuration has been copied to clipboard."
          elif command -v xclip > /dev/null; then
            # Linux with xclip
            echo -e "$CONFIG" | xclip -selection clipboard
            echo "Configuration has been copied to clipboard using xclip."
          elif command -v xsel > /dev/null; then
            # Linux with xsel
            echo -e "$CONFIG" | xsel --clipboard
            echo "Configuration has been copied to clipboard using xsel."
          elif command -v wl-copy > /dev/null; then
            # Wayland
            echo -e "$CONFIG" | wl-copy
            echo "Configuration has been copied to clipboard using wl-copy."
          else
            echo "No clipboard utility found. Configure backend using the template above."
          fi
        env:
          AWS_SDK_LOAD_CONFIG: 1
