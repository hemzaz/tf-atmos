name: drift-detection
description: "Detect infrastructure drift in an environment with automatic component discovery"

workflows:
  drift-detection:
    steps:
    - run:
        command: |
          # Get CLI version automatically (in a cross-platform way)
          ATMOS_CLI_VERSION=$(atmos version | sed -n 's/.*Atmos \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/p')
          echo "Using Atmos CLI version: ${ATMOS_CLI_VERSION}"
          
          # Validate required variables
          if [ -z "${tenant}" ] || [ -z "${account}" ] || [ -z "${environment}" ]; then
            echo "ERROR: Missing required parameters. Usage: atmos workflow drift-detection tenant=<tenant> account=<account> environment=<environment>"
            exit 1
          fi
          
          # Set stack name
          STACK="${tenant}-${account}-${environment}"
          
          # Discover available components by looking at stack files
          ENV_DIR="stacks/account/${account}/${environment}"
          echo "Discovering components in ${ENV_DIR}..."
          
          # Check if directory exists
          if [ ! -d "${ENV_DIR}" ]; then
            echo "ERROR: Environment directory ${ENV_DIR} does not exist."
            exit 1
          fi
          
          # Auto-discover component dependencies by analyzing YAML imports and output references
          echo "Auto-detecting component dependencies..."

          # Find all component configuration files
          COMPONENTS=()
          for file in ${ENV_DIR}/*.yaml; do
            if [ -f "$file" ]; then
              # Extract component name from filename (removing path and extension)
              component=$(basename "$file" .yaml)
              COMPONENTS+=("$component")
            fi
          done
          
          if [ ${#COMPONENTS[@]} -eq 0 ]; then
            echo "WARNING: No components found in ${ENV_DIR}"
            exit 0
          fi
          
          # Base dependency detection logic - analyze imports and outputs references
          # This builds a dependency graph automatically
          declare -A DEPENDENCIES
          
          # Function to extract imports from a YAML file using proper YAML parsing
          extract_imports() {
            local file=$1
            local imports=()
            
            # Check if yq is available (preferred YAML parser)
            if command -v yq >/dev/null 2>&1; then
              # Use yq for proper YAML parsing
              imports=($(yq eval '.import[]' "$file" 2>/dev/null))
              if [ ${#imports[@]} -eq 0 ]; then
                imports=($(yq eval '.imports[]' "$file" 2>/dev/null))
              fi
            else
              # Fallback to grep but warn about it
              echo "⚠️ yq not found, falling back to grep-based parsing. Consider installing yq for more reliable YAML parsing."
              
              # Extract imports section if it exists
              if grep -q "^import:" "$file" || grep -q "^imports:" "$file"; then
                # Extract lines after import: until the next section
                imports=($(grep -A20 "^import:" "$file" | grep -v "^import:" | grep -v "^---" | grep -v "^$" | grep -v "^vars:" | sed 's/^\s*-\s*//' | sed 's/catalog\///' 2>/dev/null))
                if [ ${#imports[@]} -eq 0 ]; then
                  imports=($(grep -A20 "^imports:" "$file" | grep -v "^imports:" | grep -v "^---" | grep -v "^$" | grep -v "^vars:" | sed 's/^\s*-\s*//' | sed 's/catalog\///' 2>/dev/null))
                fi
              fi
            fi
            
            echo "${imports[@]}"
          }
          
          # Function to detect output references using proper YAML parsing
          detect_references() {
            local file=$1
            local references=()
            
            # Check if yq is available (preferred YAML parser)
            if command -v yq >/dev/null 2>&1; then
              # Use a more reliable approach with yq to find all output references
              # This complex expression finds all values containing "${output." pattern and extracts the component name
              references=($(yq eval 'recurse | select(. == "*${output.*") | capture("\\${output\\.([^.}]*)").0' "$file" 2>/dev/null | sort | uniq))
              
              # If that didn't work (older versions of yq), fall back to grep but notify
              if [ ${#references[@]} -eq 0 ]; then
                echo "⚠️ Advanced yq parsing didn't find references, falling back to grep"
                if grep -q "\${output\." "$file"; then
                  references=($(grep -o '\${output\.[^.]*' "$file" | sort | uniq | sed 's/\${output\.//' 2>/dev/null))
                fi
              fi
            else
              # Fallback to grep since yq isn't available
              echo "⚠️ yq not found, falling back to grep-based reference detection. Consider installing yq for more reliable parsing."
              if grep -q "\${output\." "$file"; then
                references=($(grep -o '\${output\.[^.]*' "$file" | sort | uniq | sed 's/\${output\.//' 2>/dev/null))
              fi
            fi
            
            echo "${references[@]}"
          }
          
          # Build dependency map for each component
          for component in "${COMPONENTS[@]}"; do
            DEPENDENCIES[$component]=""
            
            # Get the component's YAML file
            component_file="${ENV_DIR}/${component}.yaml"
            
            # Extract imports and references
            imports=($(extract_imports "$component_file"))
            references=($(detect_references "$component_file"))
            
            # Add all dependencies
            for dep in "${imports[@]}" "${references[@]}"; do
              # Skip non-component dependencies
              if [[ " ${COMPONENTS[*]} " =~ " ${dep} " ]]; then
                DEPENDENCIES[$component]="${DEPENDENCIES[$component]} $dep"
              fi
            done
            
            # Trim and remove duplicates
            DEPENDENCIES[$component]=$(echo "${DEPENDENCIES[$component]}" | tr ' ' '\n' | sort | uniq | tr '\n' ' ' | xargs)
          done
          
          # Topological sort function to order components based on dependencies
          topological_sort() {
            local -a visited=()
            local -a temp=()
            local -a order=()
            
            # DFS-based topological sort with improved cycle detection
            visit() {
              local node=$1
              local cycle_path="${2:-$node}"
              
              # Check if already in result
              if [[ " ${order[*]} " =~ " ${node} " ]]; then
                return
              fi
              
              # Check for cycles
              if [[ " ${temp[*]} " =~ " ${node} " ]]; then
                # Extract the cycle path for better reporting
                local cycle_start=$(echo "$cycle_path" | grep -o "${node}.*${node}" || echo "$cycle_path")
                echo "WARNING: Circular dependency detected: $cycle_start"
                
                # Add debugging information to help resolve the circular dependency
                echo "Components in the cycle:"
                local cycle_components=($(echo "$cycle_start" | tr ' ' '\n' | sort -u))
                for component in "${cycle_components[@]}"; do
                  local component_deps="${DEPENDENCIES[$component]}"
                  echo "  - $component depends on: $component_deps"
                done
                
                # Return without adding to order to break the cycle
                return
              fi
              
              # Mark as being visited
              temp+=("$node")
              
              # Visit dependencies first
              local deps=(${DEPENDENCIES[$node]})
              for dep in "${deps[@]}"; do
                visit "$dep" "$cycle_path $dep"
              done
              
              # Remove from temporary list
              temp=(${temp[@]/$node/})
              
              # Add to result only if not already added (could happen with cycles)
              if [[ ! " ${order[*]} " =~ " ${node} " ]]; then
                order+=("$node")
              fi
            }
            
            # Visit each node
            for component in "${COMPONENTS[@]}"; do
              visit "$component"
            done
            
            echo "${order[@]}"
          }
          
          # Generate ordered component list
          SORTED_COMPONENTS=($(topological_sort))
          
          # Always ensure these core components come first if they exist
          CORE_COMPONENTS=("backend" "iam" "network")
          FINAL_ORDER=()
          
          # First add core components in the specified order
          for core in "${CORE_COMPONENTS[@]}"; do
            if [[ " ${COMPONENTS[*]} " =~ " ${core} " ]]; then
              if [[ ! " ${FINAL_ORDER[*]} " =~ " ${core} " ]]; then
                FINAL_ORDER+=("$core")
              fi
            fi
          done
          
          # Then add the rest from our sorted order
          for component in "${SORTED_COMPONENTS[@]}"; do
            if [[ ! " ${FINAL_ORDER[*]} " =~ " ${component} " ]]; then
              FINAL_ORDER+=("$component")
            fi
          done
          
          # Log the automatically determined dependency order
          echo "Detected component order: ${FINAL_ORDER[*]}"
          
          # Use our final order
          COMPONENTS=("${FINAL_ORDER[@]}")
          
          echo "============================================"
          
          # Check for drift in each component
          DRIFT_DETECTED=0
          for component in "${COMPONENTS[@]}"; do
            echo "Checking drift for ${component}..."
            EXIT_CODE=0
            
            # Use detailed-exitcode to detect changes
            # Exit code 0 = no changes, 1 = error, 2 = changes detected
            # Redirect stderr to a file so we can check for errors
            ERROR_LOG=$(mktemp)
            atmos terraform plan ${component} -s ${STACK} -detailed-exitcode 2>"${ERROR_LOG}" || EXIT_CODE=$?
            
            if [ "${EXIT_CODE}" == "2" ]; then
              echo "🚨 DRIFT DETECTED in ${component} component! 🚨"
              DRIFT_DETECTED=1
            elif [ "${EXIT_CODE}" == "1" ]; then
              # Show error message for better debugging
              ERROR_MESSAGE=$(cat "${ERROR_LOG}")
              echo "⚠️  ERROR during drift detection for ${component} ⚠️"
              echo "Error details: $(echo "${ERROR_MESSAGE}" | head -n 1)"
            else
              echo "✅ No drift detected in ${component}"
            fi
            # Clean up temporary file
            rm -f "${ERROR_LOG}"
          done
          
          echo "============================================"
          if [ $DRIFT_DETECTED -eq 1 ]; then
            echo "🚨 DRIFT DETECTED in one or more components! 🚨"
            echo "Run 'atmos workflow plan-environment tenant=${tenant} account=${account} environment=${environment}' to see details."
            exit 1
          else
            echo "✅ No drift detected in any components"
          fi
