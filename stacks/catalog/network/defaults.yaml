---
name: network
description: "Reusable network configuration including VPC and DNS"

components:
  terraform:
    vpc:
      metadata:
        component: vpc
        type: abstract
      vars:
        tenant: "${tenant}"
        enabled: true
        region: ${region}
        vpc_cidr: "10.0.0.0/16"
        azs:
          - ${region}a
          - ${region}b
          - ${region}c
        private_subnets:
          - "10.0.1.0/24"
          - "10.0.2.0/24"
          - "10.0.3.0/24"
        public_subnets:
          - "10.0.101.0/24"
          - "10.0.102.0/24"
          - "10.0.103.0/24"
        enable_nat_gateway: true
        enable_vpn_gateway: false
        enable_transit_gateway: false
        transit_gateway_id: ""
        ram_resource_share_arn: ""
        create_vpc_iam_role: true

      # Define common tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "Network"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/network/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          region: ${region}

      # Define common outputs
      outputs:
        vpc_id:
          description: "ID of the VPC"
          value: ${output.vpc_id}
        private_subnet_ids:
          description: "IDs of the private subnets"
          value: ${output.private_subnet_ids}
        public_subnet_ids:
          description: "IDs of the public subnets"
          value: ${output.public_subnet_ids}

    # DNS component configuration
    dns:
      metadata:
        component: dns
        type: abstract
      vars:
        tenant: "${tenant}"
        enabled: true
        region: ${region}
        root_domain: "${tenant}.com"
        create_root_zone: ${dns_create_root_zone | default(false)}
        multi_account_dns_delegation: ${dns_multi_account | default(false)}

        # Configure zones
        zones: ${dns_zones | default('{"main":{"name":"${environment}.${tenant}.com","comment":"Main zone for ${environment} environment","force_destroy":false,"enable_query_logging":true,"vpc_associations":[]},"internal":{"name":"internal.${environment}.${tenant}.com","comment":"Internal DNS for ${environment} environment","vpc_associations":["${output.vpc.vpc_id}"],"force_destroy":false}}')}

        # Optional records configuration
        records: ${dns_records | default('{}')}

        # Health checks configuration
        health_checks: ${dns_health_checks | default('{}')}

        # VPC DNS resolution
        vpc_dns_resolution: ${dns_vpc_resolution | default('{"main_vpc":{"vpc_id":"${output.vpc.vpc_id}","associated_zones":["internal"]}}')}

      # Define DNS tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "DNS"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/dns/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          region: ${region}

      # Define DNS outputs
      outputs:
        zone_ids:
          description: "Map of created zones and their IDs"
          value: ${output.zone_ids}
        zone_name_servers:
          description: "Map of zone name servers"
          value: ${output.zone_name_servers}
        records:
          description: "Map of created DNS records"
          value: ${output.records}

vars:
  tenant: "${tenant}"
  account: "${account}"
  environment: "${environment}"
