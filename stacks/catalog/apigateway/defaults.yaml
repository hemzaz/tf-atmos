name: apigateway
description: "Reusable API Gateway configuration"

components:
  terraform:
    apigateway_rest:
      metadata:
        component: apigateway
        type: abstract
      vars:
        tenant: "${tenant}"
        enabled: true
        region: ${region}
        api_name: "${tenant}-${environment}-rest-api"
        description: "REST API Gateway for ${environment} environment"
        api_type: "REST"
        endpoint_type: ["REGIONAL"]
        
        # REST API specific configurations
        binary_media_types:
          - "application/octet-stream"
          - "image/*"
        minimum_compression_size: 10240
        
        # Authorization
        authorizer_type: "COGNITO_USER_POOLS"
        cognito_user_pool_arns: ["${cognito_user_pool_arn}"]
        authorizer_identity_source: "method.request.header.Authorization"
        
        # API Gateway access logging
        enable_logging: true
        log_format: "{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\", \"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\", \"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\", \"integrationError\":\"$context.integrationErrorMessage\" }"
        log_retention_days: 30
        
        # Stage configurations
        stage_name: "${environment}"
        
        # API Keys and Usage Plans
        create_api_key: false
        create_usage_plan: false
        usage_plan_quota_limit: 10000
        usage_plan_quota_period: "MONTH"
        usage_plan_throttle_burst_limit: 5000
        usage_plan_throttle_rate_limit: 10000
        
        # Integration timeouts
        api_integrations: []
        
        # Monitoring
        create_dashboard: true
        tracing_enabled: true

      # Define common tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "ApiGateway"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/services/apigateway_rest/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          region: ${region}

    apigateway_http:
      metadata:
        component: apigateway
        type: abstract
      vars:
        tenant: "${tenant}"
        enabled: true
        region: ${region}
        api_name: "${tenant}-${environment}-http-api"
        description: "HTTP API Gateway for ${environment} environment"
        api_type: "HTTP"
        
        # HTTP API specific configurations
        cors_configuration:
          allow_origins:
            - "*"
          allow_methods:
            - "GET"
            - "POST"
            - "PUT"
            - "DELETE"
            - "OPTIONS"
          allow_headers:
            - "Content-Type"
            - "Authorization"
          expose_headers: []
          max_age: 300
          allow_credentials: false
        
        # Authentication options
        authorizer_type: "JWT"
        jwt_audience: ["${cognito_client_id}"]
        jwt_issuer: "https://cognito-idp.${region}.amazonaws.com/${cognito_user_pool_id}"
        
        # Logging
        enable_logging: true
        log_format: "{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\", \"routeKey\":\"$context.routeKey\", \"status\":\"$context.status\", \"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\", \"integrationError\":\"$context.integrationErrorMessage\" }"
        log_retention_days: 30
        
        # Stage configurations
        stage_name: "${environment}"
        auto_deploy: true
        
        # Monitoring
        create_dashboard: true
        tracing_enabled: true

      # Define common tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "ApiGateway"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/services/apigateway_http/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          region: ${region}

    apigateway_domain:
      metadata:
        component: apigateway
        type: abstract
      vars:
        tenant: "${tenant}"
        enabled: true
        region: ${region}
        api_name: "${tenant}-${environment}-domain"
        api_type: "REST"
        domain_name: "api.${environment}.${root_domain}"
        certificate_arn: "${acm_certificate_arn}"
        zone_id: "${route53_zone_id}"
        
        # Stage mapping
        stage_name: "${environment}"
        base_path: null
        
        # Logging (minimal for domain component)
        enable_logging: false

      # Define common tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "ApiGateway Domain"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/services/apigateway_domain/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          region: ${region}

vars:
  tenant: "${tenant}"
  account: "${account}"
  environment: "${environment}"
