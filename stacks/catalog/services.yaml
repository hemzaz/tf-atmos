name: services
description: "Reusable services configuration"

components:
  terraform:
    api_gateway:
      metadata:
        component: api_gateway
        type: abstract
      vars:
        enabled: true
        region: ${region}
        name: "${tenant}-${environment}-api"
        description: "API Gateway for ${environment} environment"
        endpoint_type: "REGIONAL"

      # Define common tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "API Gateway"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/services/api_gateway/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          profile: ${aws_profile}
          region: ${region}

    load_balancer:
      metadata:
        component: load_balancer
        type: abstract
      vars:
        enabled: true
        region: ${region}
        vpc_id: ${output.vpc.vpc_id}
        subnet_ids: ${output.vpc.public_subnet_ids}
        name: "${tenant}-${environment}-alb"
        internal: false

      # Define common tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "Load Balancer"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/services/load_balancer/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          profile: ${aws_profile}
          region: ${region}

    cloudfront:
      metadata:
        component: cloudfront
        type: abstract
      vars:
        enabled: true
        region: ${region}
        comment: "${tenant}-${environment} CloudFront distribution"
        default_cache_behavior:
          allowed_methods:
            - "GET"
            - "HEAD"
          cached_methods:
            - "GET"
            - "HEAD"
          target_origin_id: "default"
          viewer_protocol_policy: "redirect-to-https"
          min_ttl: 0
          default_ttl: 3600
          max_ttl: 86400

      # Define common tags
      tags:
        Tenant: ${tenant}
        Account: ${account}
        Environment: ${environment}
        Component: "CloudFront"
        ManagedBy: "Terraform"

      # Terraform backend configuration
      settings:
        terraform:
          backend:
            s3:
              bucket: ${tenant}-terraform-state
              key: ${account}/${environment}/services/cloudfront/terraform.tfstate
              region: ${region}
              role_arn: arn:aws:iam::${management_account_id}:role/${tenant}-terraform-backend-role
              dynamodb_table: ${tenant}-terraform-locks

      # Provider configuration
      providers:
        aws:
          profile: ${aws_profile}
          region: ${region}
