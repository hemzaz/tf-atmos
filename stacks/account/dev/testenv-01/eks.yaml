import:
  - catalog/infrastructure

vars:
  account: dev
  environment: testenv-01
  region: eu-west-2
  tenant: fnx
  domain_name: "example.com"
  hosted_zone_id: "Z1234567890ABC"
  external_secrets_enabled: true
  
dependencies:
  - network
  - iam
  - acm
  - secretsmanager_infra
  - external-secrets # Add dependency on external-secrets component

  # EKS clusters configuration
  eks.clusters:
    # Main application cluster
    main:
      enabled: true
      kubernetes_version: "1.28"
      endpoint_private_access: true
      endpoint_public_access: true
      enabled_cluster_log_types: ["api", "audit"]
      node_groups:
        workers:
          enabled: true
          instance_types: ["t3.medium"]
          desired_size: 2
          min_size: 1
          max_size: 4
          labels:
            role: worker
        monitoring:
          enabled: true
          instance_types: ["t3.large"]
          desired_size: 1
          min_size: 1
          max_size: 2
          labels:
            role: monitoring
          taints:
            - key: dedicated
              value: monitoring
              effect: "NO_SCHEDULE"
      tags:
        Purpose: "General"

    # Data processing cluster (disabled in dev)
    data:
      enabled: false
      kubernetes_version: "1.28"
      node_groups:
        workers:
          instance_types: ["t3.large"]
          desired_size: 3
      tags:
        Purpose: "DataProcessing"

  # EKS addons configuration
  eks-addons.clusters:
    main:
      # Reference to existing EKS resources
      host: ${output.eks.cluster_endpoints.main}
      cluster_ca_certificate: ${output.eks.cluster_ca_data.main}
      oidc_provider_arn: ${output.eks.oidc_provider_arns.main}
      
      # Service Mesh Configuration
      # Controls whether to deploy Istio service mesh components
      # Setting this to true will deploy:
      # - Istio operator and CRDs
      # - Ingress gateway with TLS configuration
      # - Integration with cert-manager or external-secrets
      enable_istio_service_mesh: true  # Controls the entire Istio deployment
      
      # Observability Configuration for Istio
      enable_distributed_tracing: true # Deploys Jaeger tracing backend
      enable_service_mesh_visualization: true # Deploys Kiali dashboard
      enable_jaeger_tracing_storage: true # Configures Jaeger persistent storage
      
      # Domain and certificate management 
      domain_name: "${var.domain_name}"
      hosted_zone_id: "${var.hosted_zone_id}"
      
      # Certificate integration - ARN is the only reliable reference, 
      # DO NOT use certificate_crts and certificate_keys outputs as they're placeholders
      acm_certificate_arn: ${output.acm.certificate_arns.main_wildcard}
      # Certificate content will be retrieved via External Secrets from Secrets Manager
      
      # Secrets Manager integration for certificates - using external-secrets component
      use_external_secrets: true # Now safe to enable as external-secrets is deployed separately
      
      # Path to the certificate secret in Secrets Manager
      secrets_manager_secret_path: "certificates/wildcard-${var.domain_name}-cert"

      # AWS EKS addons
      addons:
        vpc-cni:
          name: "vpc-cni"
          version: "v1.13.4-eksbuild.1"
          resolve_conflicts: "OVERWRITE"

        coredns:
          name: "coredns"
          version: "v1.10.1-eksbuild.1"

        kube-proxy:
          name: "kube-proxy"
          version: "v1.28.2-eksbuild.1"
          
        aws-ebs-csi-driver:
          name: "aws-ebs-csi-driver"
          version: "v1.24.0-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-ebs-csi-driver-policy.json}"
          
        aws-efs-csi-driver:
          name: "aws-efs-csi-driver"
          version: "v1.7.0-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-efs-csi-driver-policy.json}"
          
        aws-fsx-csi-driver:
          name: "aws-fsx-csi-driver"
          version: "v1.7.0-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-fsx-csi-driver-policy.json}"
          
        adot:
          name: "adot"
          version: "v0.90.0-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/adot-policy.json}"
          
        aws-cloudwatch-metrics:
          name: "aws-cloudwatch-metrics"
          version: "v1.1.1-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-cloudwatch-metrics-policy.json}"
          
        aws-for-fluentbit:
          name: "aws-for-fluentbit"
          version: "v2.35.0-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-for-fluentbit-policy.json}"
          
        aws-guardduty-agent:
          name: "aws-guardduty-agent"
          version: "v1.5.0-eksbuild.1"
          
        aws-gateway-api-controller:
          name: "aws-gateway-api-controller"
          version: "v1.0.2-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-gateway-api-controller-policy.json}"
          
        aws-node-termination-handler:
          name: "aws-node-termination-handler"
          version: "v1.19.0-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-node-termination-handler-policy.json}"
          
        aws-privateca-issuer:
          name: "aws-privateca-issuer"
          version: "v1.2.2-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/aws-private-ca-issuer-policy.json}"
          
        bottlerocket:
          name: "bottlerocket-shadow"
          version: "v1.0.0-eksbuild.1"
          
        secrets-store-csi-driver-provider-aws:
          name: "aws-secrets-manager-csi-driver"
          version: "v1.1.0-eksbuild.1"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/secrets-store-csi-driver-provider-aws-policy.json}"

      # Helm releases
      helm_releases:
        # Istio Service Mesh
        istio-base:
          enabled: true
          chart: "base"
          repository: "https://istio-release.storage.googleapis.com/charts"
          chart_version: "1.19.3"
          namespace: "istio-system"
          create_namespace: true
        
        istiod:
          enabled: true
          chart: "istiod"
          repository: "https://istio-release.storage.googleapis.com/charts"
          chart_version: "1.19.3"
          namespace: "istio-system"
          set_values:
            pilot.resources.requests.cpu: "500m"
            pilot.resources.requests.memory: "2Gi"
            global.proxy.resources.requests.cpu: "100m"
            global.proxy.resources.requests.memory: "128Mi"
            global.proxy.resources.limits.cpu: "2000m"
            global.proxy.resources.limits.memory: "1024Mi"
            meshConfig.accessLogFile: "/dev/stdout"
            meshConfig.enableTracing: true
            global.tracer.zipkin.address: "zipkin.istio-system:9411"
          depends_on:
            - "istio-base"
        
        istio-ingress:
          enabled: true
          chart: "gateway"
          repository: "https://istio-release.storage.googleapis.com/charts"
          chart_version: "1.19.3"
          namespace: "istio-ingress"
          create_namespace: true
          set_values:
            service.type: LoadBalancer
            service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type": "nlb"
            autoscaling.enabled: true
            autoscaling.minReplicas: 2
            autoscaling.maxReplicas: 5
            autoscaling.targetCPUUtilizationPercentage: 80
            # TLS configuration for automatic certificate
            gateways.istio-ingressgateway.tls.key: /etc/istio/ingressgateway-certs/tls.key
            gateways.istio-ingressgateway.tls.crt: /etc/istio/ingressgateway-certs/tls.crt
            # Mount certificates from secret
            gateways.istio-ingressgateway.secretVolumes[0].name: ingressgateway-certs
            gateways.istio-ingressgateway.secretVolumes[0].secretName: istio-gateway-cert
            gateways.istio-ingressgateway.secretVolumes[0].mountPath: /etc/istio/ingressgateway-certs
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/istio-policy.json}"
          depends_on:
            - "istiod"

        # Istio Addons
        kiali:
          enabled: true
          chart: "kiali-server"
          repository: "https://kiali.org/helm-charts"
          chart_version: "1.73.0"
          namespace: "istio-system"
          set_values:
            auth.strategy: "anonymous"
            deployment.ingress.enabled: true
            external_services.prometheus.url: "http://prometheus-operated.monitoring:9090"
          depends_on:
            - "istiod"
            - "prometheus"

        jaeger:
          enabled: true
          chart: "jaeger"
          repository: "https://jaegertracing.github.io/helm-charts"
          chart_version: "0.71.8"
          namespace: "istio-system"
          set_values:
            allInOne.enabled: true
            provisionDataStore.cassandra: false
            storage.type: "memory"
            allInOne.resources.limits.memory: "1Gi"
          depends_on:
            - "istiod"

        metrics-server:
          enabled: true
          chart: "metrics-server"
          repository: "https://kubernetes-sigs.github.io/metrics-server/"
          chart_version: "3.10.0"
          namespace: "kube-system"
          set_values:
            apiService.create: true
            args:
              - "--kubelet-preferred-address-types=InternalIP"
              
        cluster-autoscaler:
          enabled: true
          chart: "cluster-autoscaler"
          repository: "https://kubernetes.github.io/autoscaler"
          chart_version: "9.29.1"
          namespace: "kube-system"
          set_values:
            autoDiscovery.clusterName: "testenv-01-main"
            awsRegion: "eu-west-2"
            extraArgs.balance-similar-node-groups: true
            extraArgs.expander: least-waste
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/cluster-autoscaler-policy.json}"
          
        vertical-pod-autoscaler:
          enabled: true
          chart: "vpa"
          repository: "https://charts.fairwinds.com/stable"
          chart_version: "1.4.0"
          namespace: "vpa"
          create_namespace: true
          
# We're using AWS Certificate Manager (ACM) for certificate management instead of cert-manager
            
        external-dns:
          enabled: true
          chart: "external-dns"
          repository: "https://kubernetes-sigs.github.io/external-dns"
          chart_version: "1.13.1"
          namespace: "external-dns"
          create_namespace: true
          set_values:
            provider: aws
            aws.region: "eu-west-2"
            domainFilters: ["${var.domain_name}"]
            policy: "sync"
            registry: "txt"
            txtOwnerId: "testenv-01-main"
            interval: "1m"
            triggerLoopOnEvent: true
            sources: 
              - "service"
              - "ingress"
              - "istio-gateway"
              - "istio-virtualservice"
            extraArgs:
              - "--ignore-hostname-annotation"
              - "--aws-prefer-cname"
              - "--annotation-filter=external-dns.alpha.kubernetes.io/exclude notin (true)"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/external-dns-policy.json}"
          
        external-secrets:
          enabled: true
          chart: "external-secrets"
          repository: "https://charts.external-secrets.io"
          chart_version: "0.9.9"
          namespace: "external-secrets"
          create_namespace: true
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/external-secrets-policy.json}"
          
        ingress-nginx:
          enabled: true
          chart: "ingress-nginx"
          repository: "https://kubernetes.github.io/ingress-nginx"
          chart_version: "4.8.3"
          namespace: "ingress-nginx"
          create_namespace: true
          set_values:
            controller.service.type: LoadBalancer
            controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type": "nlb"
            
        argocd:
          enabled: true
          chart: "argo-cd"
          repository: "https://argoproj.github.io/argo-helm"
          chart_version: "5.51.4"
          namespace: "argocd"
          create_namespace: true
          values:
            - |
              server:
                extraArgs:
                  - --insecure
                config:
                  repositories: |
                    - type: git
                      url: https://github.com/argoproj/argocd-example-apps

        prometheus:
          enabled: true
          chart: "kube-prometheus-stack"
          repository: "https://prometheus-community.github.io/helm-charts"
          chart_version: "48.3.1"
          namespace: "monitoring"
          create_namespace: true
          values:
            - |
              grafana:
                enabled: true
                # Use a reference to a secret in AWS Secrets Manager or similar secure storage
                adminPassword: "${ssm:/testenv-01/grafana/admin-password}"
              prometheus:
                prometheusSpec:
                  retention: 15d
                  resources:
                    requests:
                      memory: 1Gi
                      cpu: 500m
                    limits:
                      memory: 2Gi
                      
        velero:
          enabled: true
          chart: "velero"
          repository: "https://vmware-tanzu.github.io/helm-charts"
          chart_version: "5.1.4"
          namespace: "velero"
          create_namespace: true
          set_values:
            initContainers[0].name: "velero-plugin-for-aws"
            initContainers[0].image: "velero/velero-plugin-for-aws:v1.7.1"
            initContainers[0].volumeMounts[0].mountPath: "/target"
            initContainers[0].volumeMounts[0].name: "plugins"
            configuration.provider: "aws"
            configuration.backupStorageLocation.bucket: "testenv-01-velero-backup"
            configuration.backupStorageLocation.config.region: "eu-west-2"
            configuration.volumeSnapshotLocation.config.region: "eu-west-2"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/velero-policy.json}"
          
        argo-workflows:
          enabled: true
          chart: "argo-workflows"
          repository: "https://argoproj.github.io/argo-helm"
          chart_version: "0.39.0"
          namespace: "argo"
          create_namespace: true
          set_values:
            controller.clusterWorkflowTemplates.enabled: true
            controller.workflowNamespaces: "argo,default"
            
        argo-events:
          enabled: true
          chart: "argo-events"
          repository: "https://argoproj.github.io/argo-helm"
          chart_version: "2.4.0"
          namespace: "argo-events"
          create_namespace: true
          
        argo-rollouts:
          enabled: true
          chart: "argo-rollouts"
          repository: "https://argoproj.github.io/argo-helm"
          chart_version: "2.32.5"
          namespace: "argo-rollouts"
          create_namespace: true
          set_values:
            dashboard.enabled: true

        aws-load-balancer-controller:
          enabled: true
          chart: "aws-load-balancer-controller"
          repository: "https://aws.github.io/eks-charts"
          chart_version: "1.6.1"
          namespace: "kube-system"
          set_values:
            clusterName: "testenv-01-main"
            serviceAccount.create: true
            serviceAccount.name: "aws-load-balancer-controller"
          create_service_account_role: true
          service_account_policy: ${file:/components/terraform/eks-addons/policies/aws-load-balancer-controller-policy.json}
            
        # Karpenter - Node Autoscaling
        karpenter:
          enabled: true
          chart: "karpenter"
          repository: "oci://public.ecr.aws/karpenter/karpenter"
          chart_version: "v0.32.1"
          namespace: "karpenter"
          create_namespace: true
          set_values:
            serviceAccount.create: true
            serviceAccount.name: "karpenter"
            settings.aws.clusterName: "testenv-01-main"
            settings.aws.clusterEndpoint: ${output.eks.cluster_endpoints.main}
            # Create an instance profile in IAM component and reference it here
            settings.aws.defaultInstanceProfile: "testenv-01-karpenter-node-profile"
            # Let Karpenter create its own interruption queue
            settings.aws.interruptionQueueNamePrefix: "testenv-01-karpenter-interruption"
            controller.resources.requests.cpu: "1"
            controller.resources.requests.memory: "1Gi"
            controller.resources.limits.memory: "1.5Gi"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/karpenter-policy.json}"
          
        # KEDA - Pod Autoscaling
        keda:
          enabled: true
          chart: "keda"
          repository: "https://kedacore.github.io/charts"
          chart_version: "2.12.0"
          namespace: "keda"
          create_namespace: true
          set_values:
            serviceAccount.create: true
            serviceAccount.name: "keda-operator"
            metricsServer.useHostNetwork: false
            resources.requests.cpu: "100m"
            resources.requests.memory: "128Mi"
            resources.limits.memory: "1Gi"
          create_service_account_role: true
          service_account_policy: "${file:/components/terraform/eks-addons/policies/keda-policy.json}"

      # Kubernetes manifests
      kubernetes_manifests:
        namespace-dev:
          enabled: true
          manifest: {
            "apiVersion": "v1",
            "kind": "Namespace",
            "metadata": {
              "name": "dev",
              "labels": {
                "name": "dev"
              }
            }
          }

        resource-quota:
          enabled: true
          manifest: {
            "apiVersion": "v1",
            "kind": "ResourceQuota",
            "metadata": {
              "name": "dev-quota",
              "namespace": "dev"
            },
            "spec": {
              "hard": {
                "pods": "20",
                "requests.cpu": "4",
                "requests.memory": "8Gi",
                "limits.cpu": "8",
                "limits.memory": "16Gi"
              }
            }
          }

tags:
  Team: "DevOps"
  CostCenter: "IT"
  Project: "Infrastructure"