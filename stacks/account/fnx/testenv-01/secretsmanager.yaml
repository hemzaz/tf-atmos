##################################################
# Environment-specific Secrets Manager Configuration
##################################################

import:
  - catalog/secretsmanager

vars:
  account: dev
  environment: fnx
  region: eu-west-2
  tenant: testenv-01

components:
  terraform:
    # Application database secrets
    secretsmanager_app_db:
      vars:
        enabled: true
        context_name: "myapp"
        name: "database-secrets"
        
        # KMS key for encrypting secrets (from existing KMS module)
        default_kms_key_id: "${output.kms.key_id}"
        
        # Environment-specific secrets
        secrets:
          db_credentials:
            name: "credentials"
            description: "MyApp database credentials for fnx"
            path: "rds"
            generate_random_password: true
          
          db_connection:
            name: "connection"
            description: "MyApp database connection string for fnx"
            path: "rds"
            secret_data: "postgresql://${output.rds.master_username}:${output.secretsmanager_app_db.secret_values.db_credentials}@${output.rds.endpoint}:5432/${output.rds.db_name}"
          
          db_config:
            name: "config"
            description: "MyApp database configuration for fnx"
            path: "rds"
            secret_data: |
              {
                "host": "${output.rds.address}",
                "port": 5432,
                "username": "${output.rds.master_username}",
                "password": "${output.secretsmanager_app_db.secret_values.db_credentials}",
                "database": "${output.rds.db_name}",
                "sslMode": "require"
              }

    # API secrets
    secretsmanager_api:
      vars:
        enabled: true
        context_name: "myapp"
        name: "api-secrets"
        
        # KMS key for encrypting secrets (from existing KMS module)
        default_kms_key_id: "${output.kms.key_id}"
        
        # Environment-specific secrets
        secrets:
          api_key:
            name: "api-key"
            description: "External API integration key for fnx"
            path: "integration"
            generate_random_password: true
          
          jwt_secret:
            name: "jwt-secret"
            description: "JWT signing secret for fnx"
            path: "auth"
            generate_random_password: true
            
          oauth_config:
            name: "oauth-config"
            description: "OAuth configuration for fnx"
            path: "auth"
            secret_data: |
              {
                "clientId": "test-client-id",
                "clientSecret": "${output.secretsmanager_api.secret_values.api_key}",
                "tokenEndpoint": "https://auth.example.com/oauth/token",
                "authorizeEndpoint": "https://auth.example.com/oauth/authorize",
                "callbackUrl": "https://api.fnx.example.com/callback",
                "scopes": "read write"
              }

    # Infrastructure secrets
    secretsmanager_infra:
      vars:
        enabled: true
        context_name: "myapp"
        name: "infra-secrets"
        
        # KMS key for encrypting secrets (from existing KMS module)
        default_kms_key_id: "${output.kms.key_id}"
        
        # Environment-specific secrets
        secrets:
          vpn_config:
            name: "vpn-config"
            description: "VPN configuration for fnx"
            path: "network"
            secret_data: |
              {
                "endpoint": "${output.vpc.vpn_endpoint}",
                "presharedKey": "${ssm:/fnx/network/vpn/preshared-key}",
                "tunnelOptions": {
                  "dpdTimeout": 30,
                  "ikeVersions": ["ikev2"],
                  "phase1EncryptionAlgorithms": ["AES256"],
                  "phase2EncryptionAlgorithms": ["AES256"]
                }
              }
          
          monitoring_webhook:
            name: "monitoring-webhook"
            description: "Monitoring system webhook for fnx"
            path: "monitoring"
            generate_random_password: true
            
          istio_certificates:
            name: "istio-certificates"
            description: "TLS certificates for Istio Gateway in fnx"
            path: "certificates"
            # The actual contents are retrieved from SSM Parameter Store at runtime
            # Do not store sensitive certificate data directly in YAML
            secret_data: |
              {
                "tls.crt": "${ssm:/fnx/certificates/example.com-wildcard/cert}",
                "reference_only": "true"
              }